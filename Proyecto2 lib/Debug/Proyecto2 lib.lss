
Proyecto2 lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e20  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000e94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000162f  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d2  00000000  00000000  00002663  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7c  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00003bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000582  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d94  00000000  00000000  000044de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005272  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 0b 03 	call	0x616	; 0x616 <main>
  88:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
#include "ADC.h"
#include <stdint.h>


void initADC(void) {
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	// Selecciona ADC6 como entrada analógica (MUX2:0 = 0b110)
	//ADMUX |= (1 << MUX2) | (1 << MUX1);
	// Configura referencia de voltaje AVCC con capacitor en AREF
	ADMUX |= (1 << REFS0);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	// Configura el ADC para operar en modo de 8 bits
	ADMUX |= (1 << ADLAR);
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	// Habilita el ADC y configura la prescaler a 128 (Frecuencia de muestreo = F_CPU / 128)
	ADCSRA |= (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ae:	80 81       	ld	r24, Z
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // habilitar interrupción
  b4:	80 81       	ld	r24, Z
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <EEPROM_read>:
#include <stdint.h>
//lectura de Eeprom

// Lectura de EEPROM
unsigned char EEPROM_read(unsigned int uiAddress) {
	while (EECR & (1 << EEPE)); // Esperar a que termine la escritura anterior
  bc:	f9 99       	sbic	0x1f, 1	; 31
  be:	fe cf       	rjmp	.-4      	; 0xbc <EEPROM_read>
	EEAR = uiAddress; // Establecer dirección de lectura
  c0:	92 bd       	out	0x22, r25	; 34
  c2:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE); // Iniciar lectura
  c4:	8f b3       	in	r24, 0x1f	; 31
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Retornar datos
  ca:	80 b5       	in	r24, 0x20	; 32
}
  cc:	08 95       	ret

000000ce <EEPROM_write>:

// Escritura de EEPROM
void EEPROM_write(unsigned int uiAddress, unsigned char ucData) {
	while (EECR & (1 << EEPE)); // Esperar a que termine la escritura anterior
  ce:	f9 99       	sbic	0x1f, 1	; 31
  d0:	fe cf       	rjmp	.-4      	; 0xce <EEPROM_write>
	EEAR = uiAddress; // Establecer dirección de escritura
  d2:	92 bd       	out	0x22, r25	; 34
  d4:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData; // Establecer datos a escribir
  d6:	60 bd       	out	0x20, r22	; 32
	EECR |= (1 << EEMPE); // Habilitar la escritura de datos
  d8:	8f b3       	in	r24, 0x1f	; 31
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1 << EEPE); // Iniciar escritura
  de:	8f b3       	in	r24, 0x1f	; 31
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	8f bb       	out	0x1f, r24	; 31
  e4:	08 95       	ret

000000e6 <setUP>:
uint8_t adc_value_C = 0;
uint8_t adc_value_D = 0;

/*--------------------Función para inicializar el hardware---------------------*/
void setUP() {
	cli();
  e6:	f8 94       	cli
	// Configurar el entradas
	DDRD &= ~((1 << DDD2)|(1 << DDD7)); // PD2 es el pin del botón CAMBIO DE ESTADO, (pd7) eprom
  e8:	8a b1       	in	r24, 0x0a	; 10
  ea:	8b 77       	andi	r24, 0x7B	; 123
  ec:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DDD2)|(1 << DDD7); // activar pull-up
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	84 68       	ori	r24, 0x84	; 132
  f2:	8b b9       	out	0x0b, r24	; 11
	DDRB &= ~((1 << DDB4)|(1 << DDB2)|(1 << DDB0)); //PIN DE BOTONES PARA GUADAR EN LA EMPROM PB4, PB2, PB0
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	8a 7e       	andi	r24, 0xEA	; 234
  f8:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << DDB4)|(1 << DDB2)|(1 << DDB0);// Habilitar pull-up
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	85 61       	ori	r24, 0x15	; 21
  fe:	85 b9       	out	0x05, r24	; 5

	// Habilita las interrupciones por cambio de pin en el puerto C para los pines PC0
	PCICR |= (1 << PCIE2);
 100:	e8 e6       	ldi	r30, 0x68	; 104
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	84 60       	ori	r24, 0x04	; 4
 108:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT18) ;
 10a:	ed e6       	ldi	r30, 0x6D	; 109
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	84 60       	ori	r24, 0x04	; 4
 112:	80 83       	st	Z, r24

	// Configurar los pines de los LEDs como salidas
	DDRC |= (1 << DDC0)|(1<<DDC1)|(1<<DDC5); // C0 ,C1,C5 es el pin del primer LED
 114:	87 b1       	in	r24, 0x07	; 7
 116:	83 62       	ori	r24, 0x23	; 35
 118:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << DDB1); // PB1 guardar
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	84 b9       	out	0x04, r24	; 4

	// Inicializar ADC y PWM
	initADC();
 120:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	RSTPWM0();
 124:	0e 94 11 03 	call	0x622	; 0x622 <RSTPWM0>
	RSTPWM2();
 128:	0e 94 01 04 	call	0x802	; 0x802 <RSTPWM2>
	setPWM0fastA(0, 1024);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	74 e0       	ldi	r23, 0x04	; 4
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <setPWM0fastA>
	setPWM0fastB(0, 1024);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	74 e0       	ldi	r23, 0x04	; 4
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 81 03 	call	0x702	; 0x702 <setPWM0fastB>
	setPWM2fastA(0, 1024);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	74 e0       	ldi	r23, 0x04	; 4
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 5d 04 	call	0x8ba	; 0x8ba <setPWM2fastA>
	setPWM2fastB(0, 1024);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	74 e0       	ldi	r23, 0x04	; 4
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <setPWM2fastB>

	// Habilitar las interrupciones globales
	sei();
 154:	78 94       	sei
 156:	08 95       	ret

00000158 <GuardarEP>:

/* -----------------------------Eprom------------------------------------*/
void GuardarEP(){
	
	// Leer el estado de los botones
	if (!(PINB & (1 << PB4))) {
 158:	1c 99       	sbic	0x03, 4	; 3
 15a:	28 c0       	rjmp	.+80     	; 0x1ac <GuardarEP+0x54>
		// PB4 está presionado
		EEPROM_write(0, adc_value_A);
 15c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <adc_value_A>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(1, adc_value_B);
 168:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <adc_value_B>
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(2, adc_value_C);
 174:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <adc_value_C>
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(3, adc_value_D);
 180:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <adc_value_D>
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		PORTB |= (1 << 1);
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	89 ef       	ldi	r24, 0xF9	; 249
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <GuardarEP+0x40>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <GuardarEP+0x4a>
 1a2:	00 00       	nop
		_delay_ms(20);
		PORTB &= ~(1 << 1); // Apagar
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	8d 7f       	andi	r24, 0xFD	; 253
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	7d c0       	rjmp	.+250    	; 0x2a6 <GuardarEP+0x14e>

		} else if (!(PINB & (1 << PB2))) {
 1ac:	1a 99       	sbic	0x03, 2	; 3
 1ae:	28 c0       	rjmp	.+80     	; 0x200 <GuardarEP+0xa8>
		// PB3 está presionado
		EEPROM_write(4, adc_value_A);
 1b0:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <adc_value_A>
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(5, adc_value_B);
 1bc:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <adc_value_B>
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(6, adc_value_C);
 1c8:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <adc_value_C>
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(7, adc_value_D);
 1d4:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <adc_value_D>
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		PORTB |= (1 << 1);
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	85 b9       	out	0x05, r24	; 5
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	89 ef       	ldi	r24, 0xF9	; 249
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <GuardarEP+0x94>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <GuardarEP+0x9e>
 1f6:	00 00       	nop
		_delay_ms(20);
		PORTB &= ~(1 << 1); // Apagar
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	53 c0       	rjmp	.+166    	; 0x2a6 <GuardarEP+0x14e>

		} else if (!(PIND & (1 << PD7))) {
 200:	4f 99       	sbic	0x09, 7	; 9
 202:	28 c0       	rjmp	.+80     	; 0x254 <GuardarEP+0xfc>
		// PD7 está presionado
		EEPROM_write(8, adc_value_A);
 204:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <adc_value_A>
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(9, adc_value_B);
 210:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <adc_value_B>
 214:	89 e0       	ldi	r24, 0x09	; 9
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(10, adc_value_C);
 21c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <adc_value_C>
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(11, adc_value_D);
 228:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <adc_value_D>
 22c:	8b e0       	ldi	r24, 0x0B	; 11
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		PORTB |= (1 << 1);
 234:	85 b1       	in	r24, 0x05	; 5
 236:	82 60       	ori	r24, 0x02	; 2
 238:	85 b9       	out	0x05, r24	; 5
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	89 ef       	ldi	r24, 0xF9	; 249
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <GuardarEP+0xe8>
 248:	00 c0       	rjmp	.+0      	; 0x24a <GuardarEP+0xf2>
 24a:	00 00       	nop
		_delay_ms(20);
		PORTB &= ~(1 << 1); // Apagar
 24c:	85 b1       	in	r24, 0x05	; 5
 24e:	8d 7f       	andi	r24, 0xFD	; 253
 250:	85 b9       	out	0x05, r24	; 5
 252:	29 c0       	rjmp	.+82     	; 0x2a6 <GuardarEP+0x14e>

		} else if (!(PINB & (1 << PB0))) {
 254:	18 99       	sbic	0x03, 0	; 3
 256:	27 c0       	rjmp	.+78     	; 0x2a6 <GuardarEP+0x14e>
		// PB0 está presionado
		EEPROM_write(12, adc_value_A);
 258:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <adc_value_A>
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(13, adc_value_B);
 264:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <adc_value_B>
 268:	8d e0       	ldi	r24, 0x0D	; 13
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(14, adc_value_C);
 270:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <adc_value_C>
 274:	8e e0       	ldi	r24, 0x0E	; 14
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		EEPROM_write(15, adc_value_D);
 27c:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <adc_value_D>
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		PORTB |= (1 << 1);
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	85 b9       	out	0x05, r24	; 5
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	89 ef       	ldi	r24, 0xF9	; 249
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <GuardarEP+0x13c>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <GuardarEP+0x146>
 29e:	00 00       	nop
		_delay_ms(20);
		PORTB &= ~(1 << 1); // Apagar
 2a0:	85 b1       	in	r24, 0x05	; 5
 2a2:	8d 7f       	andi	r24, 0xFD	; 253
 2a4:	85 b9       	out	0x05, r24	; 5
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	80 e7       	ldi	r24, 0x70	; 112
 2aa:	92 e0       	ldi	r25, 0x02	; 2
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <GuardarEP+0x154>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <GuardarEP+0x15e>
 2b6:	00 00       	nop
 2b8:	08 95       	ret

000002ba <leerEP>:
	_delay_ms(50);
}

void leerEP(){
	// Leer el estado de los botones
	if (!(PINB & (1 << PB4))) { // PB4 está presionado
 2ba:	1c 99       	sbic	0x03, 4	; 3
 2bc:	30 c0       	rjmp	.+96     	; 0x31e <leerEP+0x64>
		adc_value_A = EEPROM_read(0);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 2c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_value_A>
		setPWMChanel0A(adc_value_A);
 2ca:	0e 94 97 03 	call	0x72e	; 0x72e <setPWMChanel0A>
		adc_value_B = EEPROM_read(1);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 2d6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adc_value_B>
		setPWMChanel0B(adc_value_B);
 2da:	0e 94 cc 03 	call	0x798	; 0x798 <setPWMChanel0B>
		adc_value_C = EEPROM_read(2);
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 2e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_value_C>
		setPWMChanel2A(adc_value_C);
 2ea:	0e 94 99 04 	call	0x932	; 0x932 <setPWMChanel2A>
		adc_value_D = EEPROM_read(3);
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 2f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value_D>
		setPWMChanel2B(adc_value_D);
 2fa:	0e 94 cf 04 	call	0x99e	; 0x99e <setPWMChanel2B>
		PORTB |= (1 << 1);
 2fe:	85 b1       	in	r24, 0x05	; 5
 300:	82 60       	ori	r24, 0x02	; 2
 302:	85 b9       	out	0x05, r24	; 5
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	80 e7       	ldi	r24, 0x70	; 112
 308:	92 e0       	ldi	r25, 0x02	; 2
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <leerEP+0x50>
 312:	00 c0       	rjmp	.+0      	; 0x314 <leerEP+0x5a>
 314:	00 00       	nop
		_delay_ms(50);
		PORTB &= ~(1 << 1); // Apagar
 316:	85 b1       	in	r24, 0x05	; 5
 318:	8d 7f       	andi	r24, 0xFD	; 253
 31a:	85 b9       	out	0x05, r24	; 5
 31c:	95 c0       	rjmp	.+298    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>

		} else if (!(PINB & (1 << PB2))) { // PB3 está presionado
 31e:	1a 99       	sbic	0x03, 2	; 3
 320:	30 c0       	rjmp	.+96     	; 0x382 <leerEP+0xc8>
		adc_value_A = EEPROM_read(4);
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 32a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_value_A>
		setPWMChanel0A(adc_value_A);
 32e:	0e 94 97 03 	call	0x72e	; 0x72e <setPWMChanel0A>
		adc_value_B = EEPROM_read(5);
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 33a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adc_value_B>
		setPWMChanel0B(adc_value_B);
 33e:	0e 94 cc 03 	call	0x798	; 0x798 <setPWMChanel0B>
		adc_value_C = EEPROM_read(6);
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 34a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_value_C>
		setPWMChanel2A(adc_value_C);
 34e:	0e 94 99 04 	call	0x932	; 0x932 <setPWMChanel2A>
		adc_value_D = EEPROM_read(7);
 352:	87 e0       	ldi	r24, 0x07	; 7
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 35a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value_D>
		setPWMChanel2B(adc_value_D);
 35e:	0e 94 cf 04 	call	0x99e	; 0x99e <setPWMChanel2B>
		PORTB |= (1 << 1);
 362:	85 b1       	in	r24, 0x05	; 5
 364:	82 60       	ori	r24, 0x02	; 2
 366:	85 b9       	out	0x05, r24	; 5
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	80 e7       	ldi	r24, 0x70	; 112
 36c:	92 e0       	ldi	r25, 0x02	; 2
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	e1 f7       	brne	.-8      	; 0x36e <leerEP+0xb4>
 376:	00 c0       	rjmp	.+0      	; 0x378 <leerEP+0xbe>
 378:	00 00       	nop
		_delay_ms(50);
		PORTB &= ~(1 << 1); // Apagar
 37a:	85 b1       	in	r24, 0x05	; 5
 37c:	8d 7f       	andi	r24, 0xFD	; 253
 37e:	85 b9       	out	0x05, r24	; 5
 380:	63 c0       	rjmp	.+198    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>

		} else if (!(PIND & (1 << PD7))) { // PD7 está presionado
 382:	4f 99       	sbic	0x09, 7	; 9
 384:	30 c0       	rjmp	.+96     	; 0x3e6 <leerEP+0x12c>
		adc_value_A = EEPROM_read(8);
 386:	88 e0       	ldi	r24, 0x08	; 8
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 38e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_value_A>
		setPWMChanel0A(adc_value_A);
 392:	0e 94 97 03 	call	0x72e	; 0x72e <setPWMChanel0A>
		adc_value_B = EEPROM_read(9);
 396:	89 e0       	ldi	r24, 0x09	; 9
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 39e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adc_value_B>
		setPWMChanel0B(adc_value_B);
 3a2:	0e 94 cc 03 	call	0x798	; 0x798 <setPWMChanel0B>
		adc_value_C = EEPROM_read(10);
 3a6:	8a e0       	ldi	r24, 0x0A	; 10
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 3ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_value_C>
		setPWMChanel2A(adc_value_C);
 3b2:	0e 94 99 04 	call	0x932	; 0x932 <setPWMChanel2A>
		adc_value_D = EEPROM_read(11);
 3b6:	8b e0       	ldi	r24, 0x0B	; 11
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 3be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value_D>
		setPWMChanel2B(adc_value_D);
 3c2:	0e 94 cf 04 	call	0x99e	; 0x99e <setPWMChanel2B>
		PORTB |= (1 << 1);
 3c6:	85 b1       	in	r24, 0x05	; 5
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	85 b9       	out	0x05, r24	; 5
 3cc:	2f ef       	ldi	r18, 0xFF	; 255
 3ce:	80 e7       	ldi	r24, 0x70	; 112
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	21 50       	subi	r18, 0x01	; 1
 3d4:	80 40       	sbci	r24, 0x00	; 0
 3d6:	90 40       	sbci	r25, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <leerEP+0x118>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <leerEP+0x122>
 3dc:	00 00       	nop
		_delay_ms(50);
		PORTB &= ~(1 << 1); // Apagar
 3de:	85 b1       	in	r24, 0x05	; 5
 3e0:	8d 7f       	andi	r24, 0xFD	; 253
 3e2:	85 b9       	out	0x05, r24	; 5
 3e4:	31 c0       	rjmp	.+98     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>

		} else if (!(PINB & (1 << PB0))) { // PB0 está presionado
 3e6:	18 99       	sbic	0x03, 0	; 3
 3e8:	2f c0       	rjmp	.+94     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		adc_value_A = EEPROM_read(12);
 3ea:	8c e0       	ldi	r24, 0x0C	; 12
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 3f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_value_A>
		setPWMChanel0A(adc_value_A);
 3f6:	0e 94 97 03 	call	0x72e	; 0x72e <setPWMChanel0A>
		adc_value_B = EEPROM_read(13);
 3fa:	8d e0       	ldi	r24, 0x0D	; 13
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 402:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adc_value_B>
		setPWMChanel0B(adc_value_B);
 406:	0e 94 cc 03 	call	0x798	; 0x798 <setPWMChanel0B>
		adc_value_C = EEPROM_read(14);
 40a:	8e e0       	ldi	r24, 0x0E	; 14
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 412:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_value_C>
		setPWMChanel2A(adc_value_C);
 416:	0e 94 99 04 	call	0x932	; 0x932 <setPWMChanel2A>
		adc_value_D = EEPROM_read(15);
 41a:	8f e0       	ldi	r24, 0x0F	; 15
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 422:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value_D>
		setPWMChanel2B(adc_value_D);
 426:	0e 94 cf 04 	call	0x99e	; 0x99e <setPWMChanel2B>
		PORTB |= (1 << 1);
 42a:	85 b1       	in	r24, 0x05	; 5
 42c:	82 60       	ori	r24, 0x02	; 2
 42e:	85 b9       	out	0x05, r24	; 5
 430:	2f ef       	ldi	r18, 0xFF	; 255
 432:	80 e7       	ldi	r24, 0x70	; 112
 434:	92 e0       	ldi	r25, 0x02	; 2
 436:	21 50       	subi	r18, 0x01	; 1
 438:	80 40       	sbci	r24, 0x00	; 0
 43a:	90 40       	sbci	r25, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	00 00       	nop
		_delay_ms(50);
		PORTB &= ~(1 << 1); // Apagar
 442:	85 b1       	in	r24, 0x05	; 5
 444:	8d 7f       	andi	r24, 0xFD	; 253
 446:	85 b9       	out	0x05, r24	; 5
 448:	2f ef       	ldi	r18, 0xFF	; 255
 44a:	80 e7       	ldi	r24, 0x70	; 112
 44c:	92 e0       	ldi	r25, 0x02	; 2
 44e:	21 50       	subi	r18, 0x01	; 1
 450:	80 40       	sbci	r24, 0x00	; 0
 452:	90 40       	sbci	r25, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 458:	00 00       	nop
 45a:	08 95       	ret

0000045c <Manual>:
}

/* -----------------------------Modo manual------------------------*/
void Manual(){
	// Inicia una conversión ADC para el canal D (A6)
	ADMUX = (ADMUX & 0xF8) | 0x06;
 45c:	ac e7       	ldi	r26, 0x7C	; 124
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	8c 91       	ld	r24, X
 462:	88 7f       	andi	r24, 0xF8	; 248
 464:	86 60       	ori	r24, 0x06	; 6
 466:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
 468:	ea e7       	ldi	r30, 0x7A	; 122
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	80 64       	ori	r24, 0x40	; 64
 470:	80 83       	st	Z, r24
 472:	8f e3       	ldi	r24, 0x3F	; 63
 474:	9c e9       	ldi	r25, 0x9C	; 156
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <Manual+0x1a>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <Manual+0x20>
 47c:	00 00       	nop
	_delay_ms(10);

	// Inicia una conversión ADC para el canal C (A4)
	ADMUX = (ADMUX & 0xF8) | 0x04;
 47e:	8c 91       	ld	r24, X
 480:	88 7f       	andi	r24, 0xF8	; 248
 482:	84 60       	ori	r24, 0x04	; 4
 484:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
 486:	80 81       	ld	r24, Z
 488:	80 64       	ori	r24, 0x40	; 64
 48a:	80 83       	st	Z, r24
 48c:	8f e3       	ldi	r24, 0x3F	; 63
 48e:	9c e9       	ldi	r25, 0x9C	; 156
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <Manual+0x34>
 494:	00 c0       	rjmp	.+0      	; 0x496 <Manual+0x3a>
 496:	00 00       	nop
	_delay_ms(10);

	// Inicia una conversión ADC para el canal B (A3)
	ADMUX = (ADMUX & 0xF8) | 0x03;
 498:	8c 91       	ld	r24, X
 49a:	88 7f       	andi	r24, 0xF8	; 248
 49c:	83 60       	ori	r24, 0x03	; 3
 49e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
 4a0:	80 81       	ld	r24, Z
 4a2:	80 64       	ori	r24, 0x40	; 64
 4a4:	80 83       	st	Z, r24
 4a6:	8f e3       	ldi	r24, 0x3F	; 63
 4a8:	9c e9       	ldi	r25, 0x9C	; 156
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <Manual+0x4e>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <Manual+0x54>
 4b0:	00 00       	nop
	_delay_ms(10);

	// Inicia una conversión ADC para el canal A (A2)
	ADMUX = (ADMUX & 0xF8) | 0x02;
 4b2:	8c 91       	ld	r24, X
 4b4:	88 7f       	andi	r24, 0xF8	; 248
 4b6:	82 60       	ori	r24, 0x02	; 2
 4b8:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
 4ba:	80 81       	ld	r24, Z
 4bc:	80 64       	ori	r24, 0x40	; 64
 4be:	80 83       	st	Z, r24
 4c0:	8f e3       	ldi	r24, 0x3F	; 63
 4c2:	9c e9       	ldi	r25, 0x9C	; 156
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <Manual+0x68>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <Manual+0x6e>
 4ca:	00 00       	nop
 4cc:	08 95       	ret

000004ce <manejar_opcion>:
}

/* -------------Función para manejar la opción seleccionada----------------*/
void manejar_opcion() {
	// Apagar todos los LEDs
	PORTC &= ~(1 << 0); // Apagar el primer LED (C0)
 4ce:	88 b1       	in	r24, 0x08	; 8
 4d0:	8e 7f       	andi	r24, 0xFE	; 254
 4d2:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << 1); // Apagar el segundo LED (C1)
 4d4:	88 b1       	in	r24, 0x08	; 8
 4d6:	8d 7f       	andi	r24, 0xFD	; 253
 4d8:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << 5); // Apagar el tercer LED (C5)
 4da:	88 b1       	in	r24, 0x08	; 8
 4dc:	8f 7d       	andi	r24, 0xDF	; 223
 4de:	88 b9       	out	0x08, r24	; 8

	switch (opcion_menu) {
 4e0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <opcion_menu>
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	61 f0       	breq	.+24     	; 0x500 <manejar_opcion+0x32>
 4e8:	18 f0       	brcs	.+6      	; 0x4f0 <manejar_opcion+0x22>
 4ea:	82 30       	cpi	r24, 0x02	; 2
 4ec:	79 f0       	breq	.+30     	; 0x50c <manejar_opcion+0x3e>
 4ee:	08 95       	ret
		/* --------------------------Modo Manual ------------------------*/
		case 0:
		// Encender el primer LED
		PORTC |= (1 << 0); // Encender el primer LED (C0)
 4f0:	88 b1       	in	r24, 0x08	; 8
 4f2:	81 60       	ori	r24, 0x01	; 1
 4f4:	88 b9       	out	0x08, r24	; 8
		Manual(); //Habilitar la función manual
 4f6:	0e 94 2e 02 	call	0x45c	; 0x45c <Manual>
		GuardarEP();// habilitar la funcion de guardar en la eprom
 4fa:	0e 94 ac 00 	call	0x158	; 0x158 <GuardarEP>
		break;
 4fe:	08 95       	ret

		/* -------------------------- Modo EEPROM ------------------------*/
		case 1:
		// Encender el segundo LED
		PORTC |= (1 << 1); // Encender el segundo LED (C1)
 500:	88 b1       	in	r24, 0x08	; 8
 502:	82 60       	ori	r24, 0x02	; 2
 504:	88 b9       	out	0x08, r24	; 8
		leerEP();
 506:	0e 94 5d 01 	call	0x2ba	; 0x2ba <leerEP>
		break;
 50a:	08 95       	ret

		/* -----------------------Modo Adafruit---------------------------*/
		case 2:
		// Encender el tercer LED
		PORTC |= (1 << 5); // Encender el tercer LED (C5)
 50c:	88 b1       	in	r24, 0x08	; 8
 50e:	80 62       	ori	r24, 0x20	; 32
 510:	88 b9       	out	0x08, r24	; 8
 512:	08 95       	ret

00000514 <__vector_21>:
		break;
	}
}

/* -----------------------------Interrupción del ADC------------------------*/
ISR(ADC_vect) {
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	2f 93       	push	r18
 520:	3f 93       	push	r19
 522:	4f 93       	push	r20
 524:	5f 93       	push	r21
 526:	6f 93       	push	r22
 528:	7f 93       	push	r23
 52a:	8f 93       	push	r24
 52c:	9f 93       	push	r25
 52e:	af 93       	push	r26
 530:	bf 93       	push	r27
 532:	ef 93       	push	r30
 534:	ff 93       	push	r31
	if (opcion_menu == 0) { // Solo actualizar los valores en el modo manual
 536:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <opcion_menu>
 53a:	81 11       	cpse	r24, r1
 53c:	2f c0       	rjmp	.+94     	; 0x59c <__vector_21+0x88>
		if ((ADMUX & 0x07) == 0x03) { // Asegúrate de que este es el canal correcto
 53e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 542:	87 70       	andi	r24, 0x07	; 7
 544:	83 30       	cpi	r24, 0x03	; 3
 546:	39 f4       	brne	.+14     	; 0x556 <__vector_21+0x42>
			adc_value_B = ADCH;
 548:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 54c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adc_value_B>
			setPWMChanel0B(adc_value_B); //A3
 550:	0e 94 cc 03 	call	0x798	; 0x798 <setPWMChanel0B>
 554:	23 c0       	rjmp	.+70     	; 0x59c <__vector_21+0x88>
			} else if ((ADMUX & 0x07) == 0x06) {
 556:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 55a:	87 70       	andi	r24, 0x07	; 7
 55c:	86 30       	cpi	r24, 0x06	; 6
 55e:	39 f4       	brne	.+14     	; 0x56e <__vector_21+0x5a>
			adc_value_D = ADCH;
 560:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 564:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value_D>
			setPWMChanel2B(adc_value_D);//A6
 568:	0e 94 cf 04 	call	0x99e	; 0x99e <setPWMChanel2B>
 56c:	17 c0       	rjmp	.+46     	; 0x59c <__vector_21+0x88>
			} else if ((ADMUX & 0x07) == 0x02) {
 56e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 572:	87 70       	andi	r24, 0x07	; 7
 574:	82 30       	cpi	r24, 0x02	; 2
 576:	39 f4       	brne	.+14     	; 0x586 <__vector_21+0x72>
			adc_value_A = ADCH;
 578:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 57c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_value_A>
			setPWMChanel0A(adc_value_A);//A2
 580:	0e 94 97 03 	call	0x72e	; 0x72e <setPWMChanel0A>
 584:	0b c0       	rjmp	.+22     	; 0x59c <__vector_21+0x88>
			} else if ((ADMUX & 0x07) == 0x04) {
 586:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 58a:	87 70       	andi	r24, 0x07	; 7
 58c:	84 30       	cpi	r24, 0x04	; 4
 58e:	31 f4       	brne	.+12     	; 0x59c <__vector_21+0x88>
			adc_value_C = ADCH;
 590:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 594:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_value_C>
			setPWMChanel2A(adc_value_C);//A4
 598:	0e 94 99 04 	call	0x932	; 0x932 <setPWMChanel2A>
		}
	}
	ADCSRA |= (1 << ADSC); // Iniciar la próxima conversión
 59c:	ea e7       	ldi	r30, 0x7A	; 122
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	80 64       	ori	r24, 0x40	; 64
 5a4:	80 83       	st	Z, r24
}
 5a6:	ff 91       	pop	r31
 5a8:	ef 91       	pop	r30
 5aa:	bf 91       	pop	r27
 5ac:	af 91       	pop	r26
 5ae:	9f 91       	pop	r25
 5b0:	8f 91       	pop	r24
 5b2:	7f 91       	pop	r23
 5b4:	6f 91       	pop	r22
 5b6:	5f 91       	pop	r21
 5b8:	4f 91       	pop	r20
 5ba:	3f 91       	pop	r19
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <__vector_5>:

/* -------------Interrupción del DEL BOTON----------------*/
ISR(PCINT2_vect) {
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	8f 93       	push	r24
 5d4:	9f 93       	push	r25
	static uint8_t ultimo_estado = 0;
	uint8_t estado_actual = PIND & (1 << PD2); // PD2 es el pin del botón
 5d6:	89 b1       	in	r24, 0x09	; 9
	
	// Comprobar si el estado del botón ha cambiado de alto a bajo (presionado)
	if (estado_actual == 0 && ultimo_estado != 0) {
 5d8:	98 2f       	mov	r25, r24
 5da:	94 70       	andi	r25, 0x04	; 4
 5dc:	82 fd       	sbrc	r24, 2
 5de:	0f c0       	rjmp	.+30     	; 0x5fe <__vector_5+0x36>
 5e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5e4:	88 23       	and	r24, r24
 5e6:	59 f0       	breq	.+22     	; 0x5fe <__vector_5+0x36>
		// Incrementar la opción del menú
		opcion_menu++;
 5e8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <opcion_menu>
 5ec:	8f 5f       	subi	r24, 0xFF	; 255
 5ee:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <opcion_menu>
		if (opcion_menu > 2) // Reiniciar ciclo de opciones
 5f2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <opcion_menu>
 5f6:	83 30       	cpi	r24, 0x03	; 3
 5f8:	10 f0       	brcs	.+4      	; 0x5fe <__vector_5+0x36>
		opcion_menu = 0;
 5fa:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <opcion_menu>
	}
	
	// Guardar el estado actual del botón para la próxima comparación
	ultimo_estado = estado_actual;
 5fe:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
	PCIFR|=(1<<PCIF2);
 602:	8b b3       	in	r24, 0x1b	; 27
 604:	84 60       	ori	r24, 0x04	; 4
 606:	8b bb       	out	0x1b, r24	; 27
}
 608:	9f 91       	pop	r25
 60a:	8f 91       	pop	r24
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <main>:

/* -----------------------------Función principal--------------------------*/
int main(void) {
	// Deshabilitar todas las interrupciones
	cli();
 616:	f8 94       	cli
	// Inicializar hardware
	setUP();
 618:	0e 94 73 00 	call	0xe6	; 0xe6 <setUP>

	while (1) {
		// Manejar la opción seleccionada (Menú)
		manejar_opcion();
 61c:	0e 94 67 02 	call	0x4ce	; 0x4ce <manejar_opcion>
 620:	fd cf       	rjmp	.-6      	; 0x61c <main+0x6>

00000622 <RSTPWM0>:
#include <avr/io.h>
#include <stdint.h>
#include "PWM0.h"

void RSTPWM0(void) {
	TCCR0A = 0; // RESET
 622:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0; // RESET
 624:	15 bc       	out	0x25, r1	; 37
 626:	08 95       	ret

00000628 <MapPWM0>:
}

float MapPWM0(float dutyCycle, float EnMin, float EnMax, float SalMin, float SalMax) {
 628:	4f 92       	push	r4
 62a:	5f 92       	push	r5
 62c:	6f 92       	push	r6
 62e:	7f 92       	push	r7
 630:	af 92       	push	r10
 632:	bf 92       	push	r11
 634:	cf 92       	push	r12
 636:	df 92       	push	r13
 638:	ef 92       	push	r14
 63a:	ff 92       	push	r15
 63c:	0f 93       	push	r16
 63e:	1f 93       	push	r17
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
 648:	28 97       	sbiw	r28, 0x08	; 8
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
 654:	29 01       	movw	r4, r18
 656:	3a 01       	movw	r6, r20
 658:	e9 82       	std	Y+1, r14	; 0x01
 65a:	fa 82       	std	Y+2, r15	; 0x02
 65c:	0b 83       	std	Y+3, r16	; 0x03
 65e:	1c 83       	std	Y+4, r17	; 0x04
	return ((dutyCycle - EnMin) * (SalMax - SalMin) / (EnMax - EnMin));
 660:	0e 94 05 05 	call	0xa0a	; 0xa0a <__subsf3>
 664:	6d 83       	std	Y+5, r22	; 0x05
 666:	7e 83       	std	Y+6, r23	; 0x06
 668:	8f 83       	std	Y+7, r24	; 0x07
 66a:	98 87       	std	Y+8, r25	; 0x08
 66c:	a6 01       	movw	r20, r12
 66e:	95 01       	movw	r18, r10
 670:	69 8d       	ldd	r22, Y+25	; 0x19
 672:	7a 8d       	ldd	r23, Y+26	; 0x1a
 674:	8b 8d       	ldd	r24, Y+27	; 0x1b
 676:	9c 8d       	ldd	r25, Y+28	; 0x1c
 678:	0e 94 05 05 	call	0xa0a	; 0xa0a <__subsf3>
 67c:	9b 01       	movw	r18, r22
 67e:	ac 01       	movw	r20, r24
 680:	6d 81       	ldd	r22, Y+5	; 0x05
 682:	7e 81       	ldd	r23, Y+6	; 0x06
 684:	8f 81       	ldd	r24, Y+7	; 0x07
 686:	98 85       	ldd	r25, Y+8	; 0x08
 688:	0e 94 a1 06 	call	0xd42	; 0xd42 <__mulsf3>
 68c:	6b 01       	movw	r12, r22
 68e:	7c 01       	movw	r14, r24
 690:	a3 01       	movw	r20, r6
 692:	92 01       	movw	r18, r4
 694:	69 81       	ldd	r22, Y+1	; 0x01
 696:	7a 81       	ldd	r23, Y+2	; 0x02
 698:	8b 81       	ldd	r24, Y+3	; 0x03
 69a:	9c 81       	ldd	r25, Y+4	; 0x04
 69c:	0e 94 05 05 	call	0xa0a	; 0xa0a <__subsf3>
 6a0:	9b 01       	movw	r18, r22
 6a2:	ac 01       	movw	r20, r24
 6a4:	c7 01       	movw	r24, r14
 6a6:	b6 01       	movw	r22, r12
 6a8:	0e 94 72 05 	call	0xae4	; 0xae4 <__divsf3>
}
 6ac:	28 96       	adiw	r28, 0x08	; 8
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	f8 94       	cli
 6b2:	de bf       	out	0x3e, r29	; 62
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	cd bf       	out	0x3d, r28	; 61
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	1f 91       	pop	r17
 6be:	0f 91       	pop	r16
 6c0:	ff 90       	pop	r15
 6c2:	ef 90       	pop	r14
 6c4:	df 90       	pop	r13
 6c6:	cf 90       	pop	r12
 6c8:	bf 90       	pop	r11
 6ca:	af 90       	pop	r10
 6cc:	7f 90       	pop	r7
 6ce:	6f 90       	pop	r6
 6d0:	5f 90       	pop	r5
 6d2:	4f 90       	pop	r4
 6d4:	08 95       	ret

000006d6 <setPWM0fastA>:

void setPWM0fastA(uint8_t inverted, uint16_t Preescaler) {
	DDRD |= (1 << DDD6); // PIN D6 COMO SALIDA
 6d6:	9a b1       	in	r25, 0x0a	; 10
 6d8:	90 64       	ori	r25, 0x40	; 64
 6da:	9a b9       	out	0x0a, r25	; 10
	if (inverted) {
 6dc:	88 23       	and	r24, r24
 6de:	21 f0       	breq	.+8      	; 0x6e8 <setPWM0fastA+0x12>
		TCCR0A |= (1 << COM0A1) | (1 << COM0A0); // OC0A INVERTIDO
 6e0:	84 b5       	in	r24, 0x24	; 36
 6e2:	80 6c       	ori	r24, 0xC0	; 192
 6e4:	84 bd       	out	0x24, r24	; 36
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <setPWM0fastA+0x18>
		} else {
		TCCR0A |= (1 << COM0A1); // OC0A NO INVERTIDO
 6e8:	84 b5       	in	r24, 0x24	; 36
 6ea:	80 68       	ori	r24, 0x80	; 128
 6ec:	84 bd       	out	0x24, r24	; 36
	}
	TCCR0A |= (1 << WGM00) | (1 << WGM01); // MODO PWM FAST, 8 bits
 6ee:	84 b5       	in	r24, 0x24	; 36
 6f0:	83 60       	ori	r24, 0x03	; 3
 6f2:	84 bd       	out	0x24, r24	; 36
	if (Preescaler == 1024) {
 6f4:	61 15       	cp	r22, r1
 6f6:	74 40       	sbci	r23, 0x04	; 4
 6f8:	19 f4       	brne	.+6      	; 0x700 <setPWM0fastA+0x2a>
		TCCR0B |= (1 << CS02) | (1 << CS00); // PRESCALER DE 1024
 6fa:	85 b5       	in	r24, 0x25	; 37
 6fc:	85 60       	ori	r24, 0x05	; 5
 6fe:	85 bd       	out	0x25, r24	; 37
 700:	08 95       	ret

00000702 <setPWM0fastB>:
	}
}

void setPWM0fastB(uint8_t inverted, uint16_t Preescaler) {
	DDRD |= (1 << DDD5); // PIN D5 COMO SALIDA
 702:	9a b1       	in	r25, 0x0a	; 10
 704:	90 62       	ori	r25, 0x20	; 32
 706:	9a b9       	out	0x0a, r25	; 10
	if (inverted) {
 708:	88 23       	and	r24, r24
 70a:	21 f0       	breq	.+8      	; 0x714 <setPWM0fastB+0x12>
		TCCR0A |= (1 << COM0B1) | (1 << COM0B0); // OC0B INVERTIDO
 70c:	84 b5       	in	r24, 0x24	; 36
 70e:	80 63       	ori	r24, 0x30	; 48
 710:	84 bd       	out	0x24, r24	; 36
 712:	03 c0       	rjmp	.+6      	; 0x71a <setPWM0fastB+0x18>
		} else {
		TCCR0A |= (1 << COM0B1); // OC0B NO INVERTIDO
 714:	84 b5       	in	r24, 0x24	; 36
 716:	80 62       	ori	r24, 0x20	; 32
 718:	84 bd       	out	0x24, r24	; 36
	}
	TCCR0A |= (1 << WGM00) | (1 << WGM01); // MODO PWM FAST, 8 bits
 71a:	84 b5       	in	r24, 0x24	; 36
 71c:	83 60       	ori	r24, 0x03	; 3
 71e:	84 bd       	out	0x24, r24	; 36
	if (Preescaler == 1024) {
 720:	61 15       	cp	r22, r1
 722:	74 40       	sbci	r23, 0x04	; 4
 724:	19 f4       	brne	.+6      	; 0x72c <setPWM0fastB+0x2a>
		TCCR0B |= (1 << CS02) | (1 << CS00); // PRESCALER DE 1024
 726:	85 b5       	in	r24, 0x25	; 37
 728:	85 60       	ori	r24, 0x05	; 5
 72a:	85 bd       	out	0x25, r24	; 37
 72c:	08 95       	ret

0000072e <setPWMChanel0A>:
	}
}

void setPWMChanel0A(uint8_t dutyCycle) {
 72e:	af 92       	push	r10
 730:	bf 92       	push	r11
 732:	cf 92       	push	r12
 734:	df 92       	push	r13
 736:	ef 92       	push	r14
 738:	ff 92       	push	r15
 73a:	0f 93       	push	r16
 73c:	1f 93       	push	r17
	dutyCycle = MapPWM0(dutyCycle, 0, 255, 6, 36);
 73e:	68 2f       	mov	r22, r24
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 13 06 	call	0xc26	; 0xc26 <__floatunsisf>
 74a:	22 e4       	ldi	r18, 0x42	; 66
 74c:	2f 93       	push	r18
 74e:	20 e1       	ldi	r18, 0x10	; 16
 750:	2f 93       	push	r18
 752:	1f 92       	push	r1
 754:	1f 92       	push	r1
 756:	0f 2e       	mov	r0, r31
 758:	a1 2c       	mov	r10, r1
 75a:	b1 2c       	mov	r11, r1
 75c:	f0 ec       	ldi	r31, 0xC0	; 192
 75e:	cf 2e       	mov	r12, r31
 760:	f0 e4       	ldi	r31, 0x40	; 64
 762:	df 2e       	mov	r13, r31
 764:	f0 2d       	mov	r31, r0
 766:	e1 2c       	mov	r14, r1
 768:	f1 2c       	mov	r15, r1
 76a:	0f e7       	ldi	r16, 0x7F	; 127
 76c:	13 e4       	ldi	r17, 0x43	; 67
 76e:	20 e0       	ldi	r18, 0x00	; 0
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	a9 01       	movw	r20, r18
 774:	0e 94 14 03 	call	0x628	; 0x628 <MapPWM0>
 778:	0f 90       	pop	r0
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	0f 90       	pop	r0
 780:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fixunssfsi>
	OCR0A = dutyCycle;
 784:	67 bd       	out	0x27, r22	; 39
}
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	ff 90       	pop	r15
 78c:	ef 90       	pop	r14
 78e:	df 90       	pop	r13
 790:	cf 90       	pop	r12
 792:	bf 90       	pop	r11
 794:	af 90       	pop	r10
 796:	08 95       	ret

00000798 <setPWMChanel0B>:

void setPWMChanel0B(uint8_t dutyCycle) {
 798:	af 92       	push	r10
 79a:	bf 92       	push	r11
 79c:	cf 92       	push	r12
 79e:	df 92       	push	r13
 7a0:	ef 92       	push	r14
 7a2:	ff 92       	push	r15
 7a4:	0f 93       	push	r16
 7a6:	1f 93       	push	r17
	dutyCycle = MapPWM0(dutyCycle, 0, 255, 17,43);
 7a8:	68 2f       	mov	r22, r24
 7aa:	70 e0       	ldi	r23, 0x00	; 0
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0e 94 13 06 	call	0xc26	; 0xc26 <__floatunsisf>
 7b4:	22 e4       	ldi	r18, 0x42	; 66
 7b6:	2f 93       	push	r18
 7b8:	2c e2       	ldi	r18, 0x2C	; 44
 7ba:	2f 93       	push	r18
 7bc:	1f 92       	push	r1
 7be:	1f 92       	push	r1
 7c0:	0f 2e       	mov	r0, r31
 7c2:	a1 2c       	mov	r10, r1
 7c4:	b1 2c       	mov	r11, r1
 7c6:	f8 e8       	ldi	r31, 0x88	; 136
 7c8:	cf 2e       	mov	r12, r31
 7ca:	f1 e4       	ldi	r31, 0x41	; 65
 7cc:	df 2e       	mov	r13, r31
 7ce:	f0 2d       	mov	r31, r0
 7d0:	e1 2c       	mov	r14, r1
 7d2:	f1 2c       	mov	r15, r1
 7d4:	0f e7       	ldi	r16, 0x7F	; 127
 7d6:	13 e4       	ldi	r17, 0x43	; 67
 7d8:	20 e0       	ldi	r18, 0x00	; 0
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	a9 01       	movw	r20, r18
 7de:	0e 94 14 03 	call	0x628	; 0x628 <MapPWM0>
 7e2:	0f 90       	pop	r0
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fixunssfsi>
	OCR0B = dutyCycle;
 7ee:	68 bd       	out	0x28, r22	; 40
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	ff 90       	pop	r15
 7f6:	ef 90       	pop	r14
 7f8:	df 90       	pop	r13
 7fa:	cf 90       	pop	r12
 7fc:	bf 90       	pop	r11
 7fe:	af 90       	pop	r10
 800:	08 95       	ret

00000802 <RSTPWM2>:
#include <avr/io.h>
#include <stdint.h>
#include "PWM2.h"

void RSTPWM2(void){
	TCCR2A = 0;
 802:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 806:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 80a:	08 95       	ret

0000080c <MapPWM2>:
}

float MapPWM2(float dutyCycle, float EnMin, float EnMax, float SalMin, float SalMax){
 80c:	4f 92       	push	r4
 80e:	5f 92       	push	r5
 810:	6f 92       	push	r6
 812:	7f 92       	push	r7
 814:	af 92       	push	r10
 816:	bf 92       	push	r11
 818:	cf 92       	push	r12
 81a:	df 92       	push	r13
 81c:	ef 92       	push	r14
 81e:	ff 92       	push	r15
 820:	0f 93       	push	r16
 822:	1f 93       	push	r17
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62
 82c:	28 97       	sbiw	r28, 0x08	; 8
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	f8 94       	cli
 832:	de bf       	out	0x3e, r29	; 62
 834:	0f be       	out	0x3f, r0	; 63
 836:	cd bf       	out	0x3d, r28	; 61
 838:	29 01       	movw	r4, r18
 83a:	3a 01       	movw	r6, r20
 83c:	e9 82       	std	Y+1, r14	; 0x01
 83e:	fa 82       	std	Y+2, r15	; 0x02
 840:	0b 83       	std	Y+3, r16	; 0x03
 842:	1c 83       	std	Y+4, r17	; 0x04
	return((dutyCycle -EnMin)*(SalMax -SalMin)/(EnMax - EnMin));
 844:	0e 94 05 05 	call	0xa0a	; 0xa0a <__subsf3>
 848:	6d 83       	std	Y+5, r22	; 0x05
 84a:	7e 83       	std	Y+6, r23	; 0x06
 84c:	8f 83       	std	Y+7, r24	; 0x07
 84e:	98 87       	std	Y+8, r25	; 0x08
 850:	a6 01       	movw	r20, r12
 852:	95 01       	movw	r18, r10
 854:	69 8d       	ldd	r22, Y+25	; 0x19
 856:	7a 8d       	ldd	r23, Y+26	; 0x1a
 858:	8b 8d       	ldd	r24, Y+27	; 0x1b
 85a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 85c:	0e 94 05 05 	call	0xa0a	; 0xa0a <__subsf3>
 860:	9b 01       	movw	r18, r22
 862:	ac 01       	movw	r20, r24
 864:	6d 81       	ldd	r22, Y+5	; 0x05
 866:	7e 81       	ldd	r23, Y+6	; 0x06
 868:	8f 81       	ldd	r24, Y+7	; 0x07
 86a:	98 85       	ldd	r25, Y+8	; 0x08
 86c:	0e 94 a1 06 	call	0xd42	; 0xd42 <__mulsf3>
 870:	6b 01       	movw	r12, r22
 872:	7c 01       	movw	r14, r24
 874:	a3 01       	movw	r20, r6
 876:	92 01       	movw	r18, r4
 878:	69 81       	ldd	r22, Y+1	; 0x01
 87a:	7a 81       	ldd	r23, Y+2	; 0x02
 87c:	8b 81       	ldd	r24, Y+3	; 0x03
 87e:	9c 81       	ldd	r25, Y+4	; 0x04
 880:	0e 94 05 05 	call	0xa0a	; 0xa0a <__subsf3>
 884:	9b 01       	movw	r18, r22
 886:	ac 01       	movw	r20, r24
 888:	c7 01       	movw	r24, r14
 88a:	b6 01       	movw	r22, r12
 88c:	0e 94 72 05 	call	0xae4	; 0xae4 <__divsf3>
}
 890:	28 96       	adiw	r28, 0x08	; 8
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	f8 94       	cli
 896:	de bf       	out	0x3e, r29	; 62
 898:	0f be       	out	0x3f, r0	; 63
 89a:	cd bf       	out	0x3d, r28	; 61
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	0f 91       	pop	r16
 8a4:	ff 90       	pop	r15
 8a6:	ef 90       	pop	r14
 8a8:	df 90       	pop	r13
 8aa:	cf 90       	pop	r12
 8ac:	bf 90       	pop	r11
 8ae:	af 90       	pop	r10
 8b0:	7f 90       	pop	r7
 8b2:	6f 90       	pop	r6
 8b4:	5f 90       	pop	r5
 8b6:	4f 90       	pop	r4
 8b8:	08 95       	ret

000008ba <setPWM2fastA>:

void setPWM2fastA(uint8_t inverted, uint16_t Preescaler){
	DDRB|= (1<<DDB3); /* pin de salida*/
 8ba:	94 b1       	in	r25, 0x04	; 4
 8bc:	98 60       	ori	r25, 0x08	; 8
 8be:	94 b9       	out	0x04, r25	; 4
	if(inverted){
 8c0:	88 23       	and	r24, r24
 8c2:	31 f0       	breq	.+12     	; 0x8d0 <setPWM2fastA+0x16>
		TCCR2A|= (1<<COM2A1)|(1<<COM2A0);
 8c4:	e0 eb       	ldi	r30, 0xB0	; 176
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
 8ca:	80 6c       	ori	r24, 0xC0	; 192
 8cc:	80 83       	st	Z, r24
 8ce:	05 c0       	rjmp	.+10     	; 0x8da <setPWM2fastA+0x20>
	}else{
		TCCR2A|= (1<<COM2A1);
 8d0:	e0 eb       	ldi	r30, 0xB0	; 176
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	80 68       	ori	r24, 0x80	; 128
 8d8:	80 83       	st	Z, r24
	}
	TCCR2A |=(1<<WGM20)|(1<<WGM21);
 8da:	e0 eb       	ldi	r30, 0xB0	; 176
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	80 81       	ld	r24, Z
 8e0:	83 60       	ori	r24, 0x03	; 3
 8e2:	80 83       	st	Z, r24
	if (Preescaler == 1024){
 8e4:	61 15       	cp	r22, r1
 8e6:	74 40       	sbci	r23, 0x04	; 4
 8e8:	29 f4       	brne	.+10     	; 0x8f4 <setPWM2fastA+0x3a>
		TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);//Prescaler
 8ea:	e1 eb       	ldi	r30, 0xB1	; 177
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	87 60       	ori	r24, 0x07	; 7
 8f2:	80 83       	st	Z, r24
 8f4:	08 95       	ret

000008f6 <setPWM2fastB>:
	}
}

void setPWM2fastB(uint8_t inverted, uint16_t Preescaler){
	DDRD|= (1<<DDD3); /* pin de salida*/
 8f6:	9a b1       	in	r25, 0x0a	; 10
 8f8:	98 60       	ori	r25, 0x08	; 8
 8fa:	9a b9       	out	0x0a, r25	; 10
	if(inverted){
 8fc:	88 23       	and	r24, r24
 8fe:	31 f0       	breq	.+12     	; 0x90c <__stack+0xd>
		TCCR2A|= (1<<COM2B1)|(1<<COM2B0);
 900:	e0 eb       	ldi	r30, 0xB0	; 176
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	80 63       	ori	r24, 0x30	; 48
 908:	80 83       	st	Z, r24
 90a:	05 c0       	rjmp	.+10     	; 0x916 <__stack+0x17>
		}else{
		TCCR2A|= (1<<COM2B1);
 90c:	e0 eb       	ldi	r30, 0xB0	; 176
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	80 81       	ld	r24, Z
 912:	80 62       	ori	r24, 0x20	; 32
 914:	80 83       	st	Z, r24
	}
	TCCR2A |=(1<<WGM20)|(1<<WGM21);
 916:	e0 eb       	ldi	r30, 0xB0	; 176
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	83 60       	ori	r24, 0x03	; 3
 91e:	80 83       	st	Z, r24
	if (Preescaler == 1024){
 920:	61 15       	cp	r22, r1
 922:	74 40       	sbci	r23, 0x04	; 4
 924:	29 f4       	brne	.+10     	; 0x930 <__stack+0x31>
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);//Prescaler
 926:	e1 eb       	ldi	r30, 0xB1	; 177
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	87 60       	ori	r24, 0x07	; 7
 92e:	80 83       	st	Z, r24
 930:	08 95       	ret

00000932 <setPWMChanel2A>:
	}
}

void setPWMChanel2A(uint8_t dutyCycle){
 932:	af 92       	push	r10
 934:	bf 92       	push	r11
 936:	cf 92       	push	r12
 938:	df 92       	push	r13
 93a:	ef 92       	push	r14
 93c:	ff 92       	push	r15
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
	dutyCycle = MapPWM2(dutyCycle, 0, 255,  6, 36);
 942:	68 2f       	mov	r22, r24
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 13 06 	call	0xc26	; 0xc26 <__floatunsisf>
 94e:	22 e4       	ldi	r18, 0x42	; 66
 950:	2f 93       	push	r18
 952:	20 e1       	ldi	r18, 0x10	; 16
 954:	2f 93       	push	r18
 956:	1f 92       	push	r1
 958:	1f 92       	push	r1
 95a:	0f 2e       	mov	r0, r31
 95c:	a1 2c       	mov	r10, r1
 95e:	b1 2c       	mov	r11, r1
 960:	f0 ec       	ldi	r31, 0xC0	; 192
 962:	cf 2e       	mov	r12, r31
 964:	f0 e4       	ldi	r31, 0x40	; 64
 966:	df 2e       	mov	r13, r31
 968:	f0 2d       	mov	r31, r0
 96a:	e1 2c       	mov	r14, r1
 96c:	f1 2c       	mov	r15, r1
 96e:	0f e7       	ldi	r16, 0x7F	; 127
 970:	13 e4       	ldi	r17, 0x43	; 67
 972:	20 e0       	ldi	r18, 0x00	; 0
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	a9 01       	movw	r20, r18
 978:	0e 94 06 04 	call	0x80c	; 0x80c <MapPWM2>
 97c:	0f 90       	pop	r0
 97e:	0f 90       	pop	r0
 980:	0f 90       	pop	r0
 982:	0f 90       	pop	r0
 984:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fixunssfsi>
	OCR2A = dutyCycle;
 988:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
 98c:	1f 91       	pop	r17
 98e:	0f 91       	pop	r16
 990:	ff 90       	pop	r15
 992:	ef 90       	pop	r14
 994:	df 90       	pop	r13
 996:	cf 90       	pop	r12
 998:	bf 90       	pop	r11
 99a:	af 90       	pop	r10
 99c:	08 95       	ret

0000099e <setPWMChanel2B>:

void setPWMChanel2B(uint8_t dutyCycle){
 99e:	af 92       	push	r10
 9a0:	bf 92       	push	r11
 9a2:	cf 92       	push	r12
 9a4:	df 92       	push	r13
 9a6:	ef 92       	push	r14
 9a8:	ff 92       	push	r15
 9aa:	0f 93       	push	r16
 9ac:	1f 93       	push	r17
	dutyCycle = MapPWM2(dutyCycle, 0, 255,  25, 44);
 9ae:	68 2f       	mov	r22, r24
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e 94 13 06 	call	0xc26	; 0xc26 <__floatunsisf>
 9ba:	22 e4       	ldi	r18, 0x42	; 66
 9bc:	2f 93       	push	r18
 9be:	20 e3       	ldi	r18, 0x30	; 48
 9c0:	2f 93       	push	r18
 9c2:	1f 92       	push	r1
 9c4:	1f 92       	push	r1
 9c6:	0f 2e       	mov	r0, r31
 9c8:	a1 2c       	mov	r10, r1
 9ca:	b1 2c       	mov	r11, r1
 9cc:	f8 ec       	ldi	r31, 0xC8	; 200
 9ce:	cf 2e       	mov	r12, r31
 9d0:	f1 e4       	ldi	r31, 0x41	; 65
 9d2:	df 2e       	mov	r13, r31
 9d4:	f0 2d       	mov	r31, r0
 9d6:	e1 2c       	mov	r14, r1
 9d8:	f1 2c       	mov	r15, r1
 9da:	0f e7       	ldi	r16, 0x7F	; 127
 9dc:	13 e4       	ldi	r17, 0x43	; 67
 9de:	20 e0       	ldi	r18, 0x00	; 0
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	a9 01       	movw	r20, r18
 9e4:	0e 94 06 04 	call	0x80c	; 0x80c <MapPWM2>
 9e8:	0f 90       	pop	r0
 9ea:	0f 90       	pop	r0
 9ec:	0f 90       	pop	r0
 9ee:	0f 90       	pop	r0
 9f0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fixunssfsi>
	OCR2B = dutyCycle;
 9f4:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	}
 9f8:	1f 91       	pop	r17
 9fa:	0f 91       	pop	r16
 9fc:	ff 90       	pop	r15
 9fe:	ef 90       	pop	r14
 a00:	df 90       	pop	r13
 a02:	cf 90       	pop	r12
 a04:	bf 90       	pop	r11
 a06:	af 90       	pop	r10
 a08:	08 95       	ret

00000a0a <__subsf3>:
 a0a:	50 58       	subi	r21, 0x80	; 128

00000a0c <__addsf3>:
 a0c:	bb 27       	eor	r27, r27
 a0e:	aa 27       	eor	r26, r26
 a10:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__addsf3x>
 a14:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_round>
 a18:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_pscA>
 a1c:	38 f0       	brcs	.+14     	; 0xa2c <__addsf3+0x20>
 a1e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_pscB>
 a22:	20 f0       	brcs	.+8      	; 0xa2c <__addsf3+0x20>
 a24:	39 f4       	brne	.+14     	; 0xa34 <__addsf3+0x28>
 a26:	9f 3f       	cpi	r25, 0xFF	; 255
 a28:	19 f4       	brne	.+6      	; 0xa30 <__addsf3+0x24>
 a2a:	26 f4       	brtc	.+8      	; 0xa34 <__addsf3+0x28>
 a2c:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_nan>
 a30:	0e f4       	brtc	.+2      	; 0xa34 <__addsf3+0x28>
 a32:	e0 95       	com	r30
 a34:	e7 fb       	bst	r30, 7
 a36:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_inf>

00000a3a <__addsf3x>:
 a3a:	e9 2f       	mov	r30, r25
 a3c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_split3>
 a40:	58 f3       	brcs	.-42     	; 0xa18 <__addsf3+0xc>
 a42:	ba 17       	cp	r27, r26
 a44:	62 07       	cpc	r22, r18
 a46:	73 07       	cpc	r23, r19
 a48:	84 07       	cpc	r24, r20
 a4a:	95 07       	cpc	r25, r21
 a4c:	20 f0       	brcs	.+8      	; 0xa56 <__addsf3x+0x1c>
 a4e:	79 f4       	brne	.+30     	; 0xa6e <__addsf3x+0x34>
 a50:	a6 f5       	brtc	.+104    	; 0xaba <__addsf3x+0x80>
 a52:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_zero>
 a56:	0e f4       	brtc	.+2      	; 0xa5a <__addsf3x+0x20>
 a58:	e0 95       	com	r30
 a5a:	0b 2e       	mov	r0, r27
 a5c:	ba 2f       	mov	r27, r26
 a5e:	a0 2d       	mov	r26, r0
 a60:	0b 01       	movw	r0, r22
 a62:	b9 01       	movw	r22, r18
 a64:	90 01       	movw	r18, r0
 a66:	0c 01       	movw	r0, r24
 a68:	ca 01       	movw	r24, r20
 a6a:	a0 01       	movw	r20, r0
 a6c:	11 24       	eor	r1, r1
 a6e:	ff 27       	eor	r31, r31
 a70:	59 1b       	sub	r21, r25
 a72:	99 f0       	breq	.+38     	; 0xa9a <__addsf3x+0x60>
 a74:	59 3f       	cpi	r21, 0xF9	; 249
 a76:	50 f4       	brcc	.+20     	; 0xa8c <__addsf3x+0x52>
 a78:	50 3e       	cpi	r21, 0xE0	; 224
 a7a:	68 f1       	brcs	.+90     	; 0xad6 <__addsf3x+0x9c>
 a7c:	1a 16       	cp	r1, r26
 a7e:	f0 40       	sbci	r31, 0x00	; 0
 a80:	a2 2f       	mov	r26, r18
 a82:	23 2f       	mov	r18, r19
 a84:	34 2f       	mov	r19, r20
 a86:	44 27       	eor	r20, r20
 a88:	58 5f       	subi	r21, 0xF8	; 248
 a8a:	f3 cf       	rjmp	.-26     	; 0xa72 <__addsf3x+0x38>
 a8c:	46 95       	lsr	r20
 a8e:	37 95       	ror	r19
 a90:	27 95       	ror	r18
 a92:	a7 95       	ror	r26
 a94:	f0 40       	sbci	r31, 0x00	; 0
 a96:	53 95       	inc	r21
 a98:	c9 f7       	brne	.-14     	; 0xa8c <__addsf3x+0x52>
 a9a:	7e f4       	brtc	.+30     	; 0xaba <__addsf3x+0x80>
 a9c:	1f 16       	cp	r1, r31
 a9e:	ba 0b       	sbc	r27, r26
 aa0:	62 0b       	sbc	r22, r18
 aa2:	73 0b       	sbc	r23, r19
 aa4:	84 0b       	sbc	r24, r20
 aa6:	ba f0       	brmi	.+46     	; 0xad6 <__addsf3x+0x9c>
 aa8:	91 50       	subi	r25, 0x01	; 1
 aaa:	a1 f0       	breq	.+40     	; 0xad4 <__addsf3x+0x9a>
 aac:	ff 0f       	add	r31, r31
 aae:	bb 1f       	adc	r27, r27
 ab0:	66 1f       	adc	r22, r22
 ab2:	77 1f       	adc	r23, r23
 ab4:	88 1f       	adc	r24, r24
 ab6:	c2 f7       	brpl	.-16     	; 0xaa8 <__addsf3x+0x6e>
 ab8:	0e c0       	rjmp	.+28     	; 0xad6 <__addsf3x+0x9c>
 aba:	ba 0f       	add	r27, r26
 abc:	62 1f       	adc	r22, r18
 abe:	73 1f       	adc	r23, r19
 ac0:	84 1f       	adc	r24, r20
 ac2:	48 f4       	brcc	.+18     	; 0xad6 <__addsf3x+0x9c>
 ac4:	87 95       	ror	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	b7 95       	ror	r27
 acc:	f7 95       	ror	r31
 ace:	9e 3f       	cpi	r25, 0xFE	; 254
 ad0:	08 f0       	brcs	.+2      	; 0xad4 <__addsf3x+0x9a>
 ad2:	b0 cf       	rjmp	.-160    	; 0xa34 <__addsf3+0x28>
 ad4:	93 95       	inc	r25
 ad6:	88 0f       	add	r24, r24
 ad8:	08 f0       	brcs	.+2      	; 0xadc <__addsf3x+0xa2>
 ada:	99 27       	eor	r25, r25
 adc:	ee 0f       	add	r30, r30
 ade:	97 95       	ror	r25
 ae0:	87 95       	ror	r24
 ae2:	08 95       	ret

00000ae4 <__divsf3>:
 ae4:	0e 94 86 05 	call	0xb0c	; 0xb0c <__divsf3x>
 ae8:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_round>
 aec:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_pscB>
 af0:	58 f0       	brcs	.+22     	; 0xb08 <__divsf3+0x24>
 af2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_pscA>
 af6:	40 f0       	brcs	.+16     	; 0xb08 <__divsf3+0x24>
 af8:	29 f4       	brne	.+10     	; 0xb04 <__divsf3+0x20>
 afa:	5f 3f       	cpi	r21, 0xFF	; 255
 afc:	29 f0       	breq	.+10     	; 0xb08 <__divsf3+0x24>
 afe:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_inf>
 b02:	51 11       	cpse	r21, r1
 b04:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_szero>
 b08:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_nan>

00000b0c <__divsf3x>:
 b0c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_split3>
 b10:	68 f3       	brcs	.-38     	; 0xaec <__divsf3+0x8>

00000b12 <__divsf3_pse>:
 b12:	99 23       	and	r25, r25
 b14:	b1 f3       	breq	.-20     	; 0xb02 <__divsf3+0x1e>
 b16:	55 23       	and	r21, r21
 b18:	91 f3       	breq	.-28     	; 0xafe <__divsf3+0x1a>
 b1a:	95 1b       	sub	r25, r21
 b1c:	55 0b       	sbc	r21, r21
 b1e:	bb 27       	eor	r27, r27
 b20:	aa 27       	eor	r26, r26
 b22:	62 17       	cp	r22, r18
 b24:	73 07       	cpc	r23, r19
 b26:	84 07       	cpc	r24, r20
 b28:	38 f0       	brcs	.+14     	; 0xb38 <__divsf3_pse+0x26>
 b2a:	9f 5f       	subi	r25, 0xFF	; 255
 b2c:	5f 4f       	sbci	r21, 0xFF	; 255
 b2e:	22 0f       	add	r18, r18
 b30:	33 1f       	adc	r19, r19
 b32:	44 1f       	adc	r20, r20
 b34:	aa 1f       	adc	r26, r26
 b36:	a9 f3       	breq	.-22     	; 0xb22 <__divsf3_pse+0x10>
 b38:	35 d0       	rcall	.+106    	; 0xba4 <__divsf3_pse+0x92>
 b3a:	0e 2e       	mov	r0, r30
 b3c:	3a f0       	brmi	.+14     	; 0xb4c <__divsf3_pse+0x3a>
 b3e:	e0 e8       	ldi	r30, 0x80	; 128
 b40:	32 d0       	rcall	.+100    	; 0xba6 <__divsf3_pse+0x94>
 b42:	91 50       	subi	r25, 0x01	; 1
 b44:	50 40       	sbci	r21, 0x00	; 0
 b46:	e6 95       	lsr	r30
 b48:	00 1c       	adc	r0, r0
 b4a:	ca f7       	brpl	.-14     	; 0xb3e <__divsf3_pse+0x2c>
 b4c:	2b d0       	rcall	.+86     	; 0xba4 <__divsf3_pse+0x92>
 b4e:	fe 2f       	mov	r31, r30
 b50:	29 d0       	rcall	.+82     	; 0xba4 <__divsf3_pse+0x92>
 b52:	66 0f       	add	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	bb 1f       	adc	r27, r27
 b5a:	26 17       	cp	r18, r22
 b5c:	37 07       	cpc	r19, r23
 b5e:	48 07       	cpc	r20, r24
 b60:	ab 07       	cpc	r26, r27
 b62:	b0 e8       	ldi	r27, 0x80	; 128
 b64:	09 f0       	breq	.+2      	; 0xb68 <__divsf3_pse+0x56>
 b66:	bb 0b       	sbc	r27, r27
 b68:	80 2d       	mov	r24, r0
 b6a:	bf 01       	movw	r22, r30
 b6c:	ff 27       	eor	r31, r31
 b6e:	93 58       	subi	r25, 0x83	; 131
 b70:	5f 4f       	sbci	r21, 0xFF	; 255
 b72:	3a f0       	brmi	.+14     	; 0xb82 <__divsf3_pse+0x70>
 b74:	9e 3f       	cpi	r25, 0xFE	; 254
 b76:	51 05       	cpc	r21, r1
 b78:	78 f0       	brcs	.+30     	; 0xb98 <__divsf3_pse+0x86>
 b7a:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_inf>
 b7e:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_szero>
 b82:	5f 3f       	cpi	r21, 0xFF	; 255
 b84:	e4 f3       	brlt	.-8      	; 0xb7e <__divsf3_pse+0x6c>
 b86:	98 3e       	cpi	r25, 0xE8	; 232
 b88:	d4 f3       	brlt	.-12     	; 0xb7e <__divsf3_pse+0x6c>
 b8a:	86 95       	lsr	r24
 b8c:	77 95       	ror	r23
 b8e:	67 95       	ror	r22
 b90:	b7 95       	ror	r27
 b92:	f7 95       	ror	r31
 b94:	9f 5f       	subi	r25, 0xFF	; 255
 b96:	c9 f7       	brne	.-14     	; 0xb8a <__divsf3_pse+0x78>
 b98:	88 0f       	add	r24, r24
 b9a:	91 1d       	adc	r25, r1
 b9c:	96 95       	lsr	r25
 b9e:	87 95       	ror	r24
 ba0:	97 f9       	bld	r25, 7
 ba2:	08 95       	ret
 ba4:	e1 e0       	ldi	r30, 0x01	; 1
 ba6:	66 0f       	add	r22, r22
 ba8:	77 1f       	adc	r23, r23
 baa:	88 1f       	adc	r24, r24
 bac:	bb 1f       	adc	r27, r27
 bae:	62 17       	cp	r22, r18
 bb0:	73 07       	cpc	r23, r19
 bb2:	84 07       	cpc	r24, r20
 bb4:	ba 07       	cpc	r27, r26
 bb6:	20 f0       	brcs	.+8      	; 0xbc0 <__divsf3_pse+0xae>
 bb8:	62 1b       	sub	r22, r18
 bba:	73 0b       	sbc	r23, r19
 bbc:	84 0b       	sbc	r24, r20
 bbe:	ba 0b       	sbc	r27, r26
 bc0:	ee 1f       	adc	r30, r30
 bc2:	88 f7       	brcc	.-30     	; 0xba6 <__divsf3_pse+0x94>
 bc4:	e0 95       	com	r30
 bc6:	08 95       	ret

00000bc8 <__fixunssfsi>:
 bc8:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_splitA>
 bcc:	88 f0       	brcs	.+34     	; 0xbf0 <__fixunssfsi+0x28>
 bce:	9f 57       	subi	r25, 0x7F	; 127
 bd0:	98 f0       	brcs	.+38     	; 0xbf8 <__fixunssfsi+0x30>
 bd2:	b9 2f       	mov	r27, r25
 bd4:	99 27       	eor	r25, r25
 bd6:	b7 51       	subi	r27, 0x17	; 23
 bd8:	b0 f0       	brcs	.+44     	; 0xc06 <__fixunssfsi+0x3e>
 bda:	e1 f0       	breq	.+56     	; 0xc14 <__fixunssfsi+0x4c>
 bdc:	66 0f       	add	r22, r22
 bde:	77 1f       	adc	r23, r23
 be0:	88 1f       	adc	r24, r24
 be2:	99 1f       	adc	r25, r25
 be4:	1a f0       	brmi	.+6      	; 0xbec <__fixunssfsi+0x24>
 be6:	ba 95       	dec	r27
 be8:	c9 f7       	brne	.-14     	; 0xbdc <__fixunssfsi+0x14>
 bea:	14 c0       	rjmp	.+40     	; 0xc14 <__fixunssfsi+0x4c>
 bec:	b1 30       	cpi	r27, 0x01	; 1
 bee:	91 f0       	breq	.+36     	; 0xc14 <__fixunssfsi+0x4c>
 bf0:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_zero>
 bf4:	b1 e0       	ldi	r27, 0x01	; 1
 bf6:	08 95       	ret
 bf8:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_zero>
 bfc:	67 2f       	mov	r22, r23
 bfe:	78 2f       	mov	r23, r24
 c00:	88 27       	eor	r24, r24
 c02:	b8 5f       	subi	r27, 0xF8	; 248
 c04:	39 f0       	breq	.+14     	; 0xc14 <__fixunssfsi+0x4c>
 c06:	b9 3f       	cpi	r27, 0xF9	; 249
 c08:	cc f3       	brlt	.-14     	; 0xbfc <__fixunssfsi+0x34>
 c0a:	86 95       	lsr	r24
 c0c:	77 95       	ror	r23
 c0e:	67 95       	ror	r22
 c10:	b3 95       	inc	r27
 c12:	d9 f7       	brne	.-10     	; 0xc0a <__fixunssfsi+0x42>
 c14:	3e f4       	brtc	.+14     	; 0xc24 <__fixunssfsi+0x5c>
 c16:	90 95       	com	r25
 c18:	80 95       	com	r24
 c1a:	70 95       	com	r23
 c1c:	61 95       	neg	r22
 c1e:	7f 4f       	sbci	r23, 0xFF	; 255
 c20:	8f 4f       	sbci	r24, 0xFF	; 255
 c22:	9f 4f       	sbci	r25, 0xFF	; 255
 c24:	08 95       	ret

00000c26 <__floatunsisf>:
 c26:	e8 94       	clt
 c28:	09 c0       	rjmp	.+18     	; 0xc3c <__floatsisf+0x12>

00000c2a <__floatsisf>:
 c2a:	97 fb       	bst	r25, 7
 c2c:	3e f4       	brtc	.+14     	; 0xc3c <__floatsisf+0x12>
 c2e:	90 95       	com	r25
 c30:	80 95       	com	r24
 c32:	70 95       	com	r23
 c34:	61 95       	neg	r22
 c36:	7f 4f       	sbci	r23, 0xFF	; 255
 c38:	8f 4f       	sbci	r24, 0xFF	; 255
 c3a:	9f 4f       	sbci	r25, 0xFF	; 255
 c3c:	99 23       	and	r25, r25
 c3e:	a9 f0       	breq	.+42     	; 0xc6a <__floatsisf+0x40>
 c40:	f9 2f       	mov	r31, r25
 c42:	96 e9       	ldi	r25, 0x96	; 150
 c44:	bb 27       	eor	r27, r27
 c46:	93 95       	inc	r25
 c48:	f6 95       	lsr	r31
 c4a:	87 95       	ror	r24
 c4c:	77 95       	ror	r23
 c4e:	67 95       	ror	r22
 c50:	b7 95       	ror	r27
 c52:	f1 11       	cpse	r31, r1
 c54:	f8 cf       	rjmp	.-16     	; 0xc46 <__floatsisf+0x1c>
 c56:	fa f4       	brpl	.+62     	; 0xc96 <__floatsisf+0x6c>
 c58:	bb 0f       	add	r27, r27
 c5a:	11 f4       	brne	.+4      	; 0xc60 <__floatsisf+0x36>
 c5c:	60 ff       	sbrs	r22, 0
 c5e:	1b c0       	rjmp	.+54     	; 0xc96 <__floatsisf+0x6c>
 c60:	6f 5f       	subi	r22, 0xFF	; 255
 c62:	7f 4f       	sbci	r23, 0xFF	; 255
 c64:	8f 4f       	sbci	r24, 0xFF	; 255
 c66:	9f 4f       	sbci	r25, 0xFF	; 255
 c68:	16 c0       	rjmp	.+44     	; 0xc96 <__floatsisf+0x6c>
 c6a:	88 23       	and	r24, r24
 c6c:	11 f0       	breq	.+4      	; 0xc72 <__floatsisf+0x48>
 c6e:	96 e9       	ldi	r25, 0x96	; 150
 c70:	11 c0       	rjmp	.+34     	; 0xc94 <__floatsisf+0x6a>
 c72:	77 23       	and	r23, r23
 c74:	21 f0       	breq	.+8      	; 0xc7e <__floatsisf+0x54>
 c76:	9e e8       	ldi	r25, 0x8E	; 142
 c78:	87 2f       	mov	r24, r23
 c7a:	76 2f       	mov	r23, r22
 c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__floatsisf+0x5e>
 c7e:	66 23       	and	r22, r22
 c80:	71 f0       	breq	.+28     	; 0xc9e <__floatsisf+0x74>
 c82:	96 e8       	ldi	r25, 0x86	; 134
 c84:	86 2f       	mov	r24, r22
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	60 e0       	ldi	r22, 0x00	; 0
 c8a:	2a f0       	brmi	.+10     	; 0xc96 <__floatsisf+0x6c>
 c8c:	9a 95       	dec	r25
 c8e:	66 0f       	add	r22, r22
 c90:	77 1f       	adc	r23, r23
 c92:	88 1f       	adc	r24, r24
 c94:	da f7       	brpl	.-10     	; 0xc8c <__floatsisf+0x62>
 c96:	88 0f       	add	r24, r24
 c98:	96 95       	lsr	r25
 c9a:	87 95       	ror	r24
 c9c:	97 f9       	bld	r25, 7
 c9e:	08 95       	ret

00000ca0 <__fp_inf>:
 ca0:	97 f9       	bld	r25, 7
 ca2:	9f 67       	ori	r25, 0x7F	; 127
 ca4:	80 e8       	ldi	r24, 0x80	; 128
 ca6:	70 e0       	ldi	r23, 0x00	; 0
 ca8:	60 e0       	ldi	r22, 0x00	; 0
 caa:	08 95       	ret

00000cac <__fp_nan>:
 cac:	9f ef       	ldi	r25, 0xFF	; 255
 cae:	80 ec       	ldi	r24, 0xC0	; 192
 cb0:	08 95       	ret

00000cb2 <__fp_pscA>:
 cb2:	00 24       	eor	r0, r0
 cb4:	0a 94       	dec	r0
 cb6:	16 16       	cp	r1, r22
 cb8:	17 06       	cpc	r1, r23
 cba:	18 06       	cpc	r1, r24
 cbc:	09 06       	cpc	r0, r25
 cbe:	08 95       	ret

00000cc0 <__fp_pscB>:
 cc0:	00 24       	eor	r0, r0
 cc2:	0a 94       	dec	r0
 cc4:	12 16       	cp	r1, r18
 cc6:	13 06       	cpc	r1, r19
 cc8:	14 06       	cpc	r1, r20
 cca:	05 06       	cpc	r0, r21
 ccc:	08 95       	ret

00000cce <__fp_round>:
 cce:	09 2e       	mov	r0, r25
 cd0:	03 94       	inc	r0
 cd2:	00 0c       	add	r0, r0
 cd4:	11 f4       	brne	.+4      	; 0xcda <__fp_round+0xc>
 cd6:	88 23       	and	r24, r24
 cd8:	52 f0       	brmi	.+20     	; 0xcee <__fp_round+0x20>
 cda:	bb 0f       	add	r27, r27
 cdc:	40 f4       	brcc	.+16     	; 0xcee <__fp_round+0x20>
 cde:	bf 2b       	or	r27, r31
 ce0:	11 f4       	brne	.+4      	; 0xce6 <__fp_round+0x18>
 ce2:	60 ff       	sbrs	r22, 0
 ce4:	04 c0       	rjmp	.+8      	; 0xcee <__fp_round+0x20>
 ce6:	6f 5f       	subi	r22, 0xFF	; 255
 ce8:	7f 4f       	sbci	r23, 0xFF	; 255
 cea:	8f 4f       	sbci	r24, 0xFF	; 255
 cec:	9f 4f       	sbci	r25, 0xFF	; 255
 cee:	08 95       	ret

00000cf0 <__fp_split3>:
 cf0:	57 fd       	sbrc	r21, 7
 cf2:	90 58       	subi	r25, 0x80	; 128
 cf4:	44 0f       	add	r20, r20
 cf6:	55 1f       	adc	r21, r21
 cf8:	59 f0       	breq	.+22     	; 0xd10 <__fp_splitA+0x10>
 cfa:	5f 3f       	cpi	r21, 0xFF	; 255
 cfc:	71 f0       	breq	.+28     	; 0xd1a <__fp_splitA+0x1a>
 cfe:	47 95       	ror	r20

00000d00 <__fp_splitA>:
 d00:	88 0f       	add	r24, r24
 d02:	97 fb       	bst	r25, 7
 d04:	99 1f       	adc	r25, r25
 d06:	61 f0       	breq	.+24     	; 0xd20 <__fp_splitA+0x20>
 d08:	9f 3f       	cpi	r25, 0xFF	; 255
 d0a:	79 f0       	breq	.+30     	; 0xd2a <__fp_splitA+0x2a>
 d0c:	87 95       	ror	r24
 d0e:	08 95       	ret
 d10:	12 16       	cp	r1, r18
 d12:	13 06       	cpc	r1, r19
 d14:	14 06       	cpc	r1, r20
 d16:	55 1f       	adc	r21, r21
 d18:	f2 cf       	rjmp	.-28     	; 0xcfe <__fp_split3+0xe>
 d1a:	46 95       	lsr	r20
 d1c:	f1 df       	rcall	.-30     	; 0xd00 <__fp_splitA>
 d1e:	08 c0       	rjmp	.+16     	; 0xd30 <__fp_splitA+0x30>
 d20:	16 16       	cp	r1, r22
 d22:	17 06       	cpc	r1, r23
 d24:	18 06       	cpc	r1, r24
 d26:	99 1f       	adc	r25, r25
 d28:	f1 cf       	rjmp	.-30     	; 0xd0c <__fp_splitA+0xc>
 d2a:	86 95       	lsr	r24
 d2c:	71 05       	cpc	r23, r1
 d2e:	61 05       	cpc	r22, r1
 d30:	08 94       	sec
 d32:	08 95       	ret

00000d34 <__fp_zero>:
 d34:	e8 94       	clt

00000d36 <__fp_szero>:
 d36:	bb 27       	eor	r27, r27
 d38:	66 27       	eor	r22, r22
 d3a:	77 27       	eor	r23, r23
 d3c:	cb 01       	movw	r24, r22
 d3e:	97 f9       	bld	r25, 7
 d40:	08 95       	ret

00000d42 <__mulsf3>:
 d42:	0e 94 b4 06 	call	0xd68	; 0xd68 <__mulsf3x>
 d46:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_round>
 d4a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_pscA>
 d4e:	38 f0       	brcs	.+14     	; 0xd5e <__mulsf3+0x1c>
 d50:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_pscB>
 d54:	20 f0       	brcs	.+8      	; 0xd5e <__mulsf3+0x1c>
 d56:	95 23       	and	r25, r21
 d58:	11 f0       	breq	.+4      	; 0xd5e <__mulsf3+0x1c>
 d5a:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_inf>
 d5e:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_nan>
 d62:	11 24       	eor	r1, r1
 d64:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_szero>

00000d68 <__mulsf3x>:
 d68:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_split3>
 d6c:	70 f3       	brcs	.-36     	; 0xd4a <__mulsf3+0x8>

00000d6e <__mulsf3_pse>:
 d6e:	95 9f       	mul	r25, r21
 d70:	c1 f3       	breq	.-16     	; 0xd62 <__mulsf3+0x20>
 d72:	95 0f       	add	r25, r21
 d74:	50 e0       	ldi	r21, 0x00	; 0
 d76:	55 1f       	adc	r21, r21
 d78:	62 9f       	mul	r22, r18
 d7a:	f0 01       	movw	r30, r0
 d7c:	72 9f       	mul	r23, r18
 d7e:	bb 27       	eor	r27, r27
 d80:	f0 0d       	add	r31, r0
 d82:	b1 1d       	adc	r27, r1
 d84:	63 9f       	mul	r22, r19
 d86:	aa 27       	eor	r26, r26
 d88:	f0 0d       	add	r31, r0
 d8a:	b1 1d       	adc	r27, r1
 d8c:	aa 1f       	adc	r26, r26
 d8e:	64 9f       	mul	r22, r20
 d90:	66 27       	eor	r22, r22
 d92:	b0 0d       	add	r27, r0
 d94:	a1 1d       	adc	r26, r1
 d96:	66 1f       	adc	r22, r22
 d98:	82 9f       	mul	r24, r18
 d9a:	22 27       	eor	r18, r18
 d9c:	b0 0d       	add	r27, r0
 d9e:	a1 1d       	adc	r26, r1
 da0:	62 1f       	adc	r22, r18
 da2:	73 9f       	mul	r23, r19
 da4:	b0 0d       	add	r27, r0
 da6:	a1 1d       	adc	r26, r1
 da8:	62 1f       	adc	r22, r18
 daa:	83 9f       	mul	r24, r19
 dac:	a0 0d       	add	r26, r0
 dae:	61 1d       	adc	r22, r1
 db0:	22 1f       	adc	r18, r18
 db2:	74 9f       	mul	r23, r20
 db4:	33 27       	eor	r19, r19
 db6:	a0 0d       	add	r26, r0
 db8:	61 1d       	adc	r22, r1
 dba:	23 1f       	adc	r18, r19
 dbc:	84 9f       	mul	r24, r20
 dbe:	60 0d       	add	r22, r0
 dc0:	21 1d       	adc	r18, r1
 dc2:	82 2f       	mov	r24, r18
 dc4:	76 2f       	mov	r23, r22
 dc6:	6a 2f       	mov	r22, r26
 dc8:	11 24       	eor	r1, r1
 dca:	9f 57       	subi	r25, 0x7F	; 127
 dcc:	50 40       	sbci	r21, 0x00	; 0
 dce:	9a f0       	brmi	.+38     	; 0xdf6 <__mulsf3_pse+0x88>
 dd0:	f1 f0       	breq	.+60     	; 0xe0e <__mulsf3_pse+0xa0>
 dd2:	88 23       	and	r24, r24
 dd4:	4a f0       	brmi	.+18     	; 0xde8 <__mulsf3_pse+0x7a>
 dd6:	ee 0f       	add	r30, r30
 dd8:	ff 1f       	adc	r31, r31
 dda:	bb 1f       	adc	r27, r27
 ddc:	66 1f       	adc	r22, r22
 dde:	77 1f       	adc	r23, r23
 de0:	88 1f       	adc	r24, r24
 de2:	91 50       	subi	r25, 0x01	; 1
 de4:	50 40       	sbci	r21, 0x00	; 0
 de6:	a9 f7       	brne	.-22     	; 0xdd2 <__mulsf3_pse+0x64>
 de8:	9e 3f       	cpi	r25, 0xFE	; 254
 dea:	51 05       	cpc	r21, r1
 dec:	80 f0       	brcs	.+32     	; 0xe0e <__mulsf3_pse+0xa0>
 dee:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_inf>
 df2:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_szero>
 df6:	5f 3f       	cpi	r21, 0xFF	; 255
 df8:	e4 f3       	brlt	.-8      	; 0xdf2 <__mulsf3_pse+0x84>
 dfa:	98 3e       	cpi	r25, 0xE8	; 232
 dfc:	d4 f3       	brlt	.-12     	; 0xdf2 <__mulsf3_pse+0x84>
 dfe:	86 95       	lsr	r24
 e00:	77 95       	ror	r23
 e02:	67 95       	ror	r22
 e04:	b7 95       	ror	r27
 e06:	f7 95       	ror	r31
 e08:	e7 95       	ror	r30
 e0a:	9f 5f       	subi	r25, 0xFF	; 255
 e0c:	c1 f7       	brne	.-16     	; 0xdfe <__mulsf3_pse+0x90>
 e0e:	fe 2b       	or	r31, r30
 e10:	88 0f       	add	r24, r24
 e12:	91 1d       	adc	r25, r1
 e14:	96 95       	lsr	r25
 e16:	87 95       	ror	r24
 e18:	97 f9       	bld	r25, 7
 e1a:	08 95       	ret

00000e1c <_exit>:
 e1c:	f8 94       	cli

00000e1e <__stop_program>:
 e1e:	ff cf       	rjmp	.-2      	; 0xe1e <__stop_program>
