
Proyecto2 lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000778  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000007ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f69  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097e  00000000  00000000  000018c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e7  00000000  00000000  00002243  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c7  00000000  00000000  0000324c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003713  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  88:	0c 94 ba 03 	jmp	0x774	; 0x774 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 
#include "ADC.h"


void initADC(void) {
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	// Selecciona ADC6 como entrada analógica (MUX2:0 = 0b110)
	//ADMUX |= (1 << MUX2) | (1 << MUX1);
	// Configura referencia de voltaje AVCC con capacitor en AREF
	ADMUX |= (1 << REFS0);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	// Configura el ADC para operar en modo de 8 bits
	ADMUX |= (1 << ADLAR);
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	// Habilita el ADC y configura la prescaler a 128 (Frecuencia de muestreo = F_CPU / 128)
	ADCSRA |= (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ae:	80 81       	ld	r24, Z
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // habilitar interrupción
  b4:	80 81       	ld	r24, Z
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <EEPROM_read>:
 *  Author: asrol
 */ 
#include "EPROM.h"
//lectura de Eeprom
unsigned char EEPROM_read(unsigned int uiAddress){
	while(EECR & (1<<EEPE));
  bc:	f9 99       	sbic	0x1f, 1	; 31
  be:	fe cf       	rjmp	.-4      	; 0xbc <EEPROM_read>
	EEAR = uiAddress;
  c0:	92 bd       	out	0x22, r25	; 34
  c2:	81 bd       	out	0x21, r24	; 33
	EEAR |=(1<<EERE);
  c4:	81 b5       	in	r24, 0x21	; 33
  c6:	92 b5       	in	r25, 0x22	; 34
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	92 bd       	out	0x22, r25	; 34
  cc:	81 bd       	out	0x21, r24	; 33
	return EEDR;
  ce:	80 b5       	in	r24, 0x20	; 32
}
  d0:	08 95       	ret

000000d2 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	while(EECR & (1<<EEPE));
  d2:	f9 99       	sbic	0x1f, 1	; 31
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <EEPROM_write>
	EEAR = uiAddress;
  d6:	92 bd       	out	0x22, r25	; 34
  d8:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
  da:	60 bd       	out	0x20, r22	; 32
	EECR |=(1<<EEMPE);
  dc:	8f b3       	in	r24, 0x1f	; 31
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	8f bb       	out	0x1f, r24	; 31
	EECR |=(1<<EEPE);
  e2:	8f b3       	in	r24, 0x1f	; 31
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	8f bb       	out	0x1f, r24	; 31
  e8:	08 95       	ret

000000ea <setUP>:
uint8_t adc_value_C = 0;
uint8_t adc_value_D = 0;

/*--------------------Función para inicializar el hardware---------------------*/
void setUP() {
	cli();
  ea:	f8 94       	cli
	// Configurar el entradas
	DDRD &= ~((1 << DDD2)|(1 << DDD7)); // PD2 es el pin del botón CAMBIO DE ESTADO, (pd7) eprom
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	8b 77       	andi	r24, 0x7B	; 123
  f0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DDD2)|(1 << DDD7); // activar pull-up
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	84 68       	ori	r24, 0x84	; 132
  f6:	8b b9       	out	0x0b, r24	; 11
	DDRB &= ~((1 << DDB4)|(1 << DDB3)|(1 << DDB0)); //PIN DE BOTONES PARA GUADAR EN LA EMPROM PB4, PB3, PB0
  f8:	84 b1       	in	r24, 0x04	; 4
  fa:	86 7e       	andi	r24, 0xE6	; 230
  fc:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << DDB4)|(1 << DDB3)|(1 << DDB0);// Habilitar pull-up
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	89 61       	ori	r24, 0x19	; 25
 102:	85 b9       	out	0x05, r24	; 5

	// Habilita las interrupciones por cambio de pin en el puerto C para los pines PC0 
	PCICR |= (1 << PCIE2);
 104:	e8 e6       	ldi	r30, 0x68	; 104
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT18) ;
 10e:	ed e6       	ldi	r30, 0x6D	; 109
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	84 60       	ori	r24, 0x04	; 4
 116:	80 83       	st	Z, r24

	// Configurar los pines de los LEDs como salidas
	DDRC |= (1 << DDC0)|(1<<DDC1)|(1<<DDC5); // C0 ,C1,C5 es el pin del primer LED
 118:	87 b1       	in	r24, 0x07	; 7
 11a:	83 62       	ori	r24, 0x23	; 35
 11c:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << DDD4); // PD4 guardar
 11e:	8a b1       	in	r24, 0x0a	; 10
 120:	80 61       	ori	r24, 0x10	; 16
 122:	8a b9       	out	0x0a, r24	; 10

	// Inicializar ADC y PWM
	initADC();
 124:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	setupPWM1();
 128:	0e 94 39 02 	call	0x472	; 0x472 <setupPWM1>
	setupPWM0();
 12c:	0e 94 18 02 	call	0x430	; 0x430 <setupPWM0>

	// Habilitar las interrupciones globales
	sei();
 130:	78 94       	sei
 132:	08 95       	ret

00000134 <GuardarEP>:
/* -----------------------------Eprom------------------------------------*/


void GuardarEP(){
	 // Leer el estado de los botones
	 if (!(PINB & (1 << PB4))) {
 134:	1c 99       	sbic	0x03, 4	; 3
 136:	13 c0       	rjmp	.+38     	; 0x15e <GuardarEP+0x2a>
		 // PB4 está presionado
			EEPROM_write(0, adc_value_D);
 138:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <adc_value_D>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 69 00 	call	0xd2	; 0xd2 <EEPROM_write>
			PORTD |= (1 << 4);
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	80 61       	ori	r24, 0x10	; 16
 148:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	87 e8       	ldi	r24, 0x87	; 135
 14c:	93 e1       	ldi	r25, 0x13	; 19
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <GuardarEP+0x1a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <GuardarEP+0x20>
 154:	00 00       	nop
			_delay_ms(20);
			PORTD &= ~(1 << 4); // Apagar
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	8f 7e       	andi	r24, 0xEF	; 239
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	4b c0       	rjmp	.+150    	; 0x1f4 <GuardarEP+0xc0>

	 } else if (!(PINB & (1 << PB3))) {
 15e:	1b 99       	sbic	0x03, 3	; 3
 160:	13 c0       	rjmp	.+38     	; 0x188 <GuardarEP+0x54>
		 // PB3 está presionado
			EEPROM_write(1, adc_value_C);
 162:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <adc_value_C>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 69 00 	call	0xd2	; 0xd2 <EEPROM_write>
			PORTD |= (1 << 4);
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 61       	ori	r24, 0x10	; 16
 172:	8b b9       	out	0x0b, r24	; 11
 174:	87 e8       	ldi	r24, 0x87	; 135
 176:	93 e1       	ldi	r25, 0x13	; 19
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <GuardarEP+0x44>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <GuardarEP+0x4a>
 17e:	00 00       	nop
			_delay_ms(20);
			PORTD &= ~(1 << 4); // Apagar	
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	8f 7e       	andi	r24, 0xEF	; 239
 184:	8b b9       	out	0x0b, r24	; 11
 186:	36 c0       	rjmp	.+108    	; 0x1f4 <GuardarEP+0xc0>
	 
	 } else if (!(PINB & (1 << PB0))) {
 188:	18 99       	sbic	0x03, 0	; 3
 18a:	13 c0       	rjmp	.+38     	; 0x1b2 <GuardarEP+0x7e>
		 // PB0 está presionado
			EEPROM_write(3, adc_value_A);
 18c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <adc_value_A>
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 69 00 	call	0xd2	; 0xd2 <EEPROM_write>
			PORTD |= (1 << 4);
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	87 e8       	ldi	r24, 0x87	; 135
 1a0:	93 e1       	ldi	r25, 0x13	; 19
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <GuardarEP+0x6e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <GuardarEP+0x74>
 1a8:	00 00       	nop
			_delay_ms(20);
			PORTD &= ~(1 << 4); // Apagar
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	8f 7e       	andi	r24, 0xEF	; 239
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	21 c0       	rjmp	.+66     	; 0x1f4 <GuardarEP+0xc0>
			
	 } else if (!(PIND & (1 << PD7))) {
 1b2:	4f 99       	sbic	0x09, 7	; 9
 1b4:	1f c0       	rjmp	.+62     	; 0x1f4 <GuardarEP+0xc0>
		 // PD7 está presionado
			EEPROM_write(2, (adc_value_B/1.7));
 1b6:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <adc_value_B>
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 06 03 	call	0x60c	; 0x60c <__floatsisf>
 1c4:	2a e9       	ldi	r18, 0x9A	; 154
 1c6:	39 e9       	ldi	r19, 0x99	; 153
 1c8:	49 ed       	ldi	r20, 0xD9	; 217
 1ca:	5f e3       	ldi	r21, 0x3F	; 63
 1cc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__divsf3>
 1d0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 69 00 	call	0xd2	; 0xd2 <EEPROM_write>
			
			PORTD |= (1 << 4);
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	87 e8       	ldi	r24, 0x87	; 135
 1e4:	93 e1       	ldi	r25, 0x13	; 19
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <GuardarEP+0xb2>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <GuardarEP+0xb8>
 1ec:	00 00       	nop
			_delay_ms(20);
			PORTD &= ~(1 << 4); // Apagar
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8f 7e       	andi	r24, 0xEF	; 239
 1f2:	8b b9       	out	0x0b, r24	; 11
 1f4:	83 ed       	ldi	r24, 0xD3	; 211
 1f6:	90 e3       	ldi	r25, 0x30	; 48
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <GuardarEP+0xc4>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <GuardarEP+0xca>
 1fe:	00 00       	nop
 200:	08 95       	ret

00000202 <leerEP>:
	 _delay_ms(50);
}

void leerEP(){
	// Leer el estado de los botones
	if (!(PINB & (1 << PB4))) {// PB4 está presionado
 202:	1c 99       	sbic	0x03, 4	; 3
 204:	09 c0       	rjmp	.+18     	; 0x218 <leerEP+0x16>
		adc_value_D = EEPROM_read(0);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 20e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value_D>
		setPWMChannelD(adc_value_D);
 212:	0e 94 2e 02 	call	0x45c	; 0x45c <setPWMChannelD>
 216:	20 c0       	rjmp	.+64     	; 0x258 <leerEP+0x56>
		
		} else if (!(PINB & (1 << PB3))) {// PB3 está presionado
 218:	1b 99       	sbic	0x03, 3	; 3
 21a:	09 c0       	rjmp	.+18     	; 0x22e <leerEP+0x2c>
		adc_value_C = EEPROM_read(1);
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 224:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_value_C>
		setPWMChannelC(adc_value_C);
 228:	0e 94 23 02 	call	0x446	; 0x446 <setPWMChannelC>
 22c:	15 c0       	rjmp	.+42     	; 0x258 <leerEP+0x56>
		
		} else if (!(PINB & (1 << PB0))) {// PB0 está presionado
 22e:	18 99       	sbic	0x03, 0	; 3
 230:	09 c0       	rjmp	.+18     	; 0x244 <leerEP+0x42>
		adc_value_A = EEPROM_read(3);
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 23a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_value_A>
		setPWMChannelA(adc_value_A);
 23e:	0e 94 4a 02 	call	0x494	; 0x494 <setPWMChannelA>
 242:	0a c0       	rjmp	.+20     	; 0x258 <leerEP+0x56>
	
		} else if (!(PIND & (1 << PD7))) {// PD7 está presionado 
 244:	4f 99       	sbic	0x09, 7	; 9
 246:	08 c0       	rjmp	.+16     	; 0x258 <leerEP+0x56>
		adc_value_B = EEPROM_read(2);
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 5e 00 	call	0xbc	; 0xbc <EEPROM_read>
 250:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adc_value_B>
		setPWMChannelB(adc_value_B);
 254:	0e 94 5d 02 	call	0x4ba	; 0x4ba <setPWMChannelB>
 258:	83 ed       	ldi	r24, 0xD3	; 211
 25a:	90 e3       	ldi	r25, 0x30	; 48
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <leerEP+0x5a>
 260:	00 c0       	rjmp	.+0      	; 0x262 <leerEP+0x60>
 262:	00 00       	nop
 264:	08 95       	ret

00000266 <Manual>:
	_delay_ms(50);
}
/* -----------------------------Modo manual------------------------*/
void Manual(){
	// Inicia una conversión ADC para el canal A (A6)
	ADMUX = (ADMUX & 0xF8) | 0x06;
 266:	ac e7       	ldi	r26, 0x7C	; 124
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	8c 91       	ld	r24, X
 26c:	88 7f       	andi	r24, 0xF8	; 248
 26e:	86 60       	ori	r24, 0x06	; 6
 270:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
 272:	ea e7       	ldi	r30, 0x7A	; 122
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	80 83       	st	Z, r24
 27c:	83 ec       	ldi	r24, 0xC3	; 195
 27e:	99 e0       	ldi	r25, 0x09	; 9
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <Manual+0x1a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <Manual+0x20>
 286:	00 00       	nop
	_delay_ms(10);

	// Inicia una conversión ADC para el canal B (A4)
	ADMUX = (ADMUX & 0xF8) | 0x04;
 288:	8c 91       	ld	r24, X
 28a:	88 7f       	andi	r24, 0xF8	; 248
 28c:	84 60       	ori	r24, 0x04	; 4
 28e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	80 83       	st	Z, r24
 296:	83 ec       	ldi	r24, 0xC3	; 195
 298:	99 e0       	ldi	r25, 0x09	; 9
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <Manual+0x34>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <Manual+0x3a>
 2a0:	00 00       	nop
	_delay_ms(10);

	// Inicia una conversión ADC para el canal C (A3)
	ADMUX = (ADMUX & 0xF8) | 0x03;
 2a2:	8c 91       	ld	r24, X
 2a4:	88 7f       	andi	r24, 0xF8	; 248
 2a6:	83 60       	ori	r24, 0x03	; 3
 2a8:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
 2aa:	80 81       	ld	r24, Z
 2ac:	80 64       	ori	r24, 0x40	; 64
 2ae:	80 83       	st	Z, r24
 2b0:	83 ec       	ldi	r24, 0xC3	; 195
 2b2:	99 e0       	ldi	r25, 0x09	; 9
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <Manual+0x4e>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <Manual+0x54>
 2ba:	00 00       	nop
	_delay_ms(10);

	// Inicia una conversión ADC para el canal D (A2)
	ADMUX = (ADMUX & 0xF8) | 0x02;
 2bc:	8c 91       	ld	r24, X
 2be:	88 7f       	andi	r24, 0xF8	; 248
 2c0:	82 60       	ori	r24, 0x02	; 2
 2c2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
 2c4:	80 81       	ld	r24, Z
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	80 83       	st	Z, r24
 2ca:	83 ec       	ldi	r24, 0xC3	; 195
 2cc:	99 e0       	ldi	r25, 0x09	; 9
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <Manual+0x68>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <Manual+0x6e>
 2d4:	00 00       	nop
 2d6:	08 95       	ret

000002d8 <manejar_opcion>:
}

/* -------------Función para manejar la opción seleccionada----------------*/
void manejar_opcion() {
	// Apagar todos los LEDs
	PORTC &= ~(1 << 0); // Apagar el primer LED (C0)
 2d8:	88 b1       	in	r24, 0x08	; 8
 2da:	8e 7f       	andi	r24, 0xFE	; 254
 2dc:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << 1); // Apagar el segundo LED (C1)
 2de:	88 b1       	in	r24, 0x08	; 8
 2e0:	8d 7f       	andi	r24, 0xFD	; 253
 2e2:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << 5); // Apagar el tercer LED (C5)
 2e4:	88 b1       	in	r24, 0x08	; 8
 2e6:	8f 7d       	andi	r24, 0xDF	; 223
 2e8:	88 b9       	out	0x08, r24	; 8

	switch (opcion_menu) {
 2ea:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <opcion_menu>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	61 f0       	breq	.+24     	; 0x30a <manejar_opcion+0x32>
 2f2:	18 f0       	brcs	.+6      	; 0x2fa <manejar_opcion+0x22>
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	79 f0       	breq	.+30     	; 0x316 <manejar_opcion+0x3e>
 2f8:	08 95       	ret
/* --------------------------Modo Manual ------------------------*/
		case 0:
			// Encender el primer LED
			PORTC |= (1 << 0); // Encender el primer LED (C0)
 2fa:	88 b1       	in	r24, 0x08	; 8
 2fc:	81 60       	ori	r24, 0x01	; 1
 2fe:	88 b9       	out	0x08, r24	; 8
			Manual(); //Habilitar la función manual
 300:	0e 94 33 01 	call	0x266	; 0x266 <Manual>
			GuardarEP();// habilitar la funcion de guardar en la eprom
 304:	0e 94 9a 00 	call	0x134	; 0x134 <GuardarEP>
			
			break;
 308:	08 95       	ret
/* -------------------------- Modo EEPROM ------------------------*/
		case 1:
			// Encender el segundo LED
			PORTC |= (1 << 1); // Encender el segundo LED (C1)
 30a:	88 b1       	in	r24, 0x08	; 8
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	88 b9       	out	0x08, r24	; 8
			leerEP();
 310:	0e 94 01 01 	call	0x202	; 0x202 <leerEP>
			break;
 314:	08 95       	ret
/* -----------------------Modo Adafruit---------------------------*/
		case 2:
			// Encender el tercer LED
			PORTC |= (1 << 5); // Encender el tercer LED (C5)
 316:	88 b1       	in	r24, 0x08	; 8
 318:	80 62       	ori	r24, 0x20	; 32
 31a:	88 b9       	out	0x08, r24	; 8
 31c:	08 95       	ret

0000031e <main>:
	sei();
}
/* -----------------------------Función principal--------------------------*/
int main(void) {
	//desabilitar todas las interrupciones
	cli();
 31e:	f8 94       	cli
	// Inicializar hardware
	setUP();
 320:	0e 94 75 00 	call	0xea	; 0xea <setUP>

	while (1) {
		// Manejar la opción seleccionada (Menú)
		manejar_opcion();
 324:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <manejar_opcion>
 328:	fd cf       	rjmp	.-6      	; 0x324 <main+0x6>

0000032a <__vector_21>:
	
}
	
/* -----------------------------Interrupción del ADC------------------------*/

ISR(ADC_vect) {
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	2f 93       	push	r18
 336:	3f 93       	push	r19
 338:	4f 93       	push	r20
 33a:	5f 93       	push	r21
 33c:	6f 93       	push	r22
 33e:	7f 93       	push	r23
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
 344:	af 93       	push	r26
 346:	bf 93       	push	r27
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
	if ((ADMUX & 0x07) == 0x04) {
 34c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 350:	87 70       	andi	r24, 0x07	; 7
 352:	84 30       	cpi	r24, 0x04	; 4
 354:	a9 f4       	brne	.+42     	; 0x380 <__vector_21+0x56>
		adc_value_B = ADCH;
 356:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 35a:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <adc_value_B>
		setPWMChannelB(adc_value_B/1.73 );
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 06 03 	call	0x60c	; 0x60c <__floatsisf>
 368:	24 ea       	ldi	r18, 0xA4	; 164
 36a:	30 e7       	ldi	r19, 0x70	; 112
 36c:	4d ed       	ldi	r20, 0xDD	; 221
 36e:	5f e3       	ldi	r21, 0x3F	; 63
 370:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__divsf3>
 374:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 378:	86 2f       	mov	r24, r22
 37a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <setPWMChannelB>
 37e:	1e c0       	rjmp	.+60     	; 0x3bc <__vector_21+0x92>
		} else if ((ADMUX & 0x07) == 0x03) {
 380:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 384:	87 70       	andi	r24, 0x07	; 7
 386:	83 30       	cpi	r24, 0x03	; 3
 388:	39 f4       	brne	.+14     	; 0x398 <__vector_21+0x6e>
		adc_value_C = ADCH;
 38a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 38e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_value_C>
		setPWMChannelC(adc_value_C );
 392:	0e 94 23 02 	call	0x446	; 0x446 <setPWMChannelC>
 396:	12 c0       	rjmp	.+36     	; 0x3bc <__vector_21+0x92>
		} else if ((ADMUX & 0x07) == 0x02) {
 398:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 39c:	87 70       	andi	r24, 0x07	; 7
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	39 f4       	brne	.+14     	; 0x3b0 <__vector_21+0x86>
		adc_value_D = ADCH;
 3a2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3a6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value_D>
		setPWMChannelD(adc_value_D);
 3aa:	0e 94 2e 02 	call	0x45c	; 0x45c <setPWMChannelD>
 3ae:	06 c0       	rjmp	.+12     	; 0x3bc <__vector_21+0x92>
		} else {
		adc_value_A = ADCH;
 3b0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3b4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_value_A>
		setPWMChannelA(adc_value_A );
 3b8:	0e 94 4a 02 	call	0x494	; 0x494 <setPWMChannelA>
	}

	ADCSRA |= (1 << ADIF);
 3bc:	ea e7       	ldi	r30, 0x7A	; 122
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	80 61       	ori	r24, 0x10	; 16
 3c4:	80 83       	st	Z, r24
}
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	7f 91       	pop	r23
 3d4:	6f 91       	pop	r22
 3d6:	5f 91       	pop	r21
 3d8:	4f 91       	pop	r20
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_5>:

/* -------------Interrupción del DEL BOTON----------------*/
ISR(PCINT2_vect) {
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
	static uint8_t ultimo_estado = 0;
	uint8_t estado_actual = PIND & (1 << PD2); // PD2 es el pin del botón
 3f6:	89 b1       	in	r24, 0x09	; 9
	
	// Comprobar si el estado del botón ha cambiado de alto a bajo (presionado)
	if (estado_actual == 0 && ultimo_estado != 0) {
 3f8:	98 2f       	mov	r25, r24
 3fa:	94 70       	andi	r25, 0x04	; 4
 3fc:	82 fd       	sbrc	r24, 2
 3fe:	0f c0       	rjmp	.+30     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 400:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 404:	88 23       	and	r24, r24
 406:	59 f0       	breq	.+22     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		// Incrementar la opción del menú
		opcion_menu++;
 408:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <opcion_menu>
 40c:	8f 5f       	subi	r24, 0xFF	; 255
 40e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <opcion_menu>
		if (opcion_menu > 2) // Reiniciar ciclo de opciones
 412:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <opcion_menu>
 416:	83 30       	cpi	r24, 0x03	; 3
 418:	10 f0       	brcs	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		opcion_menu = 0;
 41a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <opcion_menu>
	}
	
	// Guardar el estado actual del botón para la próxima comparación
	ultimo_estado = estado_actual;
 41e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <setupPWM0>:
 */ 
#include "PWM0.h"

void setupPWM0(void) {
	// Configurar los pines como salidas PWM
	DDRD |= (1 << DDD6); // Canal C (OC0A)
 430:	8a b1       	in	r24, 0x0a	; 10
 432:	80 64       	ori	r24, 0x40	; 64
 434:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD5); // Canal D (OC0B)
 436:	8a b1       	in	r24, 0x0a	; 10
 438:	80 62       	ori	r24, 0x20	; 32
 43a:	8a b9       	out	0x0a, r24	; 10

	// Configurar el modo de PWM en el Timer0
	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) | (1 << WGM01); // Modo Fast PWM, No invertido
 43c:	83 ea       	ldi	r24, 0xA3	; 163
 43e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // Preescaler de 64
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	85 bd       	out	0x25, r24	; 37
 444:	08 95       	ret

00000446 <setPWMChannelC>:
}

void setPWMChannelC(uint8_t duty_cycle) {
	OCR0A = (duty_cycle * 180) /255 + 10;
 446:	24 eb       	ldi	r18, 0xB4	; 180
 448:	82 9f       	mul	r24, r18
 44a:	c0 01       	movw	r24, r0
 44c:	11 24       	eor	r1, r1
 44e:	6f ef       	ldi	r22, 0xFF	; 255
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	0e 94 92 03 	call	0x724	; 0x724 <__divmodhi4>
 456:	66 5f       	subi	r22, 0xF6	; 246
 458:	67 bd       	out	0x27, r22	; 39
 45a:	08 95       	ret

0000045c <setPWMChannelD>:
}

void setPWMChannelD(uint8_t duty_cycle) {
	OCR0B = (duty_cycle * 180) /255 + 10;
 45c:	24 eb       	ldi	r18, 0xB4	; 180
 45e:	82 9f       	mul	r24, r18
 460:	c0 01       	movw	r24, r0
 462:	11 24       	eor	r1, r1
 464:	6f ef       	ldi	r22, 0xFF	; 255
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	0e 94 92 03 	call	0x724	; 0x724 <__divmodhi4>
 46c:	66 5f       	subi	r22, 0xF6	; 246
 46e:	68 bd       	out	0x28, r22	; 40
 470:	08 95       	ret

00000472 <setupPWM1>:
#include "PWM1.h"


void setupPWM1(void) {
	// Configurar los pines como salidas PWM
	DDRB |= (1 << DDB1); // Canal A (OC1A)
 472:	84 b1       	in	r24, 0x04	; 4
 474:	82 60       	ori	r24, 0x02	; 2
 476:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB2); // Canal B (OC1B)
 478:	84 b1       	in	r24, 0x04	; 4
 47a:	84 60       	ori	r24, 0x04	; 4
 47c:	84 b9       	out	0x04, r24	; 4

	// Configurar el modo de PWM en el Timer1
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10); // Modo Fast PWM, No invertido
 47e:	81 ea       	ldi	r24, 0xA1	; 161
 480:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12); // Modo Fast PWM
 484:	e1 e8       	ldi	r30, 0x81	; 129
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	88 e0       	ldi	r24, 0x08	; 8
 48a:	80 83       	st	Z, r24

	// Configurar el preescaler para el Timer1
	TCCR1B |= (1 << CS12); // Preescaler de 1024
 48c:	80 81       	ld	r24, Z
 48e:	84 60       	ori	r24, 0x04	; 4
 490:	80 83       	st	Z, r24
 492:	08 95       	ret

00000494 <setPWMChannelA>:
}

void setPWMChannelA(uint8_t duty_cycle) {
	OCR1A = duty_cycle/1.70; //* 180) /255+10; // Establecer el ciclo de trabajo del canal A
 494:	68 2f       	mov	r22, r24
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 06 03 	call	0x60c	; 0x60c <__floatsisf>
 4a0:	2a e9       	ldi	r18, 0x9A	; 154
 4a2:	39 e9       	ldi	r19, 0x99	; 153
 4a4:	49 ed       	ldi	r20, 0xD9	; 217
 4a6:	5f e3       	ldi	r21, 0x3F	; 63
 4a8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__divsf3>
 4ac:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 4b0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4b4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 4b8:	08 95       	ret

000004ba <setPWMChannelB>:
}

void setPWMChannelB(uint8_t duty_cycle) {
	OCR1B = (duty_cycle); //* 180) / 255+10; // Establecer el ciclo de trabajo del canal B
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 4c0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 4c4:	08 95       	ret

000004c6 <__divsf3>:
 4c6:	0e 94 77 02 	call	0x4ee	; 0x4ee <__divsf3x>
 4ca:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_round>
 4ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_pscB>
 4d2:	58 f0       	brcs	.+22     	; 0x4ea <__divsf3+0x24>
 4d4:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_pscA>
 4d8:	40 f0       	brcs	.+16     	; 0x4ea <__divsf3+0x24>
 4da:	29 f4       	brne	.+10     	; 0x4e6 <__divsf3+0x20>
 4dc:	5f 3f       	cpi	r21, 0xFF	; 255
 4de:	29 f0       	breq	.+10     	; 0x4ea <__divsf3+0x24>
 4e0:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_inf>
 4e4:	51 11       	cpse	r21, r1
 4e6:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_szero>
 4ea:	0c 94 47 03 	jmp	0x68e	; 0x68e <__fp_nan>

000004ee <__divsf3x>:
 4ee:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_split3>
 4f2:	68 f3       	brcs	.-38     	; 0x4ce <__divsf3+0x8>

000004f4 <__divsf3_pse>:
 4f4:	99 23       	and	r25, r25
 4f6:	b1 f3       	breq	.-20     	; 0x4e4 <__divsf3+0x1e>
 4f8:	55 23       	and	r21, r21
 4fa:	91 f3       	breq	.-28     	; 0x4e0 <__divsf3+0x1a>
 4fc:	95 1b       	sub	r25, r21
 4fe:	55 0b       	sbc	r21, r21
 500:	bb 27       	eor	r27, r27
 502:	aa 27       	eor	r26, r26
 504:	62 17       	cp	r22, r18
 506:	73 07       	cpc	r23, r19
 508:	84 07       	cpc	r24, r20
 50a:	38 f0       	brcs	.+14     	; 0x51a <__divsf3_pse+0x26>
 50c:	9f 5f       	subi	r25, 0xFF	; 255
 50e:	5f 4f       	sbci	r21, 0xFF	; 255
 510:	22 0f       	add	r18, r18
 512:	33 1f       	adc	r19, r19
 514:	44 1f       	adc	r20, r20
 516:	aa 1f       	adc	r26, r26
 518:	a9 f3       	breq	.-22     	; 0x504 <__divsf3_pse+0x10>
 51a:	35 d0       	rcall	.+106    	; 0x586 <__divsf3_pse+0x92>
 51c:	0e 2e       	mov	r0, r30
 51e:	3a f0       	brmi	.+14     	; 0x52e <__divsf3_pse+0x3a>
 520:	e0 e8       	ldi	r30, 0x80	; 128
 522:	32 d0       	rcall	.+100    	; 0x588 <__divsf3_pse+0x94>
 524:	91 50       	subi	r25, 0x01	; 1
 526:	50 40       	sbci	r21, 0x00	; 0
 528:	e6 95       	lsr	r30
 52a:	00 1c       	adc	r0, r0
 52c:	ca f7       	brpl	.-14     	; 0x520 <__divsf3_pse+0x2c>
 52e:	2b d0       	rcall	.+86     	; 0x586 <__divsf3_pse+0x92>
 530:	fe 2f       	mov	r31, r30
 532:	29 d0       	rcall	.+82     	; 0x586 <__divsf3_pse+0x92>
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	88 1f       	adc	r24, r24
 53a:	bb 1f       	adc	r27, r27
 53c:	26 17       	cp	r18, r22
 53e:	37 07       	cpc	r19, r23
 540:	48 07       	cpc	r20, r24
 542:	ab 07       	cpc	r26, r27
 544:	b0 e8       	ldi	r27, 0x80	; 128
 546:	09 f0       	breq	.+2      	; 0x54a <__divsf3_pse+0x56>
 548:	bb 0b       	sbc	r27, r27
 54a:	80 2d       	mov	r24, r0
 54c:	bf 01       	movw	r22, r30
 54e:	ff 27       	eor	r31, r31
 550:	93 58       	subi	r25, 0x83	; 131
 552:	5f 4f       	sbci	r21, 0xFF	; 255
 554:	3a f0       	brmi	.+14     	; 0x564 <__divsf3_pse+0x70>
 556:	9e 3f       	cpi	r25, 0xFE	; 254
 558:	51 05       	cpc	r21, r1
 55a:	78 f0       	brcs	.+30     	; 0x57a <__divsf3_pse+0x86>
 55c:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_inf>
 560:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_szero>
 564:	5f 3f       	cpi	r21, 0xFF	; 255
 566:	e4 f3       	brlt	.-8      	; 0x560 <__divsf3_pse+0x6c>
 568:	98 3e       	cpi	r25, 0xE8	; 232
 56a:	d4 f3       	brlt	.-12     	; 0x560 <__divsf3_pse+0x6c>
 56c:	86 95       	lsr	r24
 56e:	77 95       	ror	r23
 570:	67 95       	ror	r22
 572:	b7 95       	ror	r27
 574:	f7 95       	ror	r31
 576:	9f 5f       	subi	r25, 0xFF	; 255
 578:	c9 f7       	brne	.-14     	; 0x56c <__divsf3_pse+0x78>
 57a:	88 0f       	add	r24, r24
 57c:	91 1d       	adc	r25, r1
 57e:	96 95       	lsr	r25
 580:	87 95       	ror	r24
 582:	97 f9       	bld	r25, 7
 584:	08 95       	ret
 586:	e1 e0       	ldi	r30, 0x01	; 1
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	bb 1f       	adc	r27, r27
 590:	62 17       	cp	r22, r18
 592:	73 07       	cpc	r23, r19
 594:	84 07       	cpc	r24, r20
 596:	ba 07       	cpc	r27, r26
 598:	20 f0       	brcs	.+8      	; 0x5a2 <__divsf3_pse+0xae>
 59a:	62 1b       	sub	r22, r18
 59c:	73 0b       	sbc	r23, r19
 59e:	84 0b       	sbc	r24, r20
 5a0:	ba 0b       	sbc	r27, r26
 5a2:	ee 1f       	adc	r30, r30
 5a4:	88 f7       	brcc	.-30     	; 0x588 <__divsf3_pse+0x94>
 5a6:	e0 95       	com	r30
 5a8:	08 95       	ret

000005aa <__fixunssfsi>:
 5aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__fp_splitA>
 5ae:	88 f0       	brcs	.+34     	; 0x5d2 <__fixunssfsi+0x28>
 5b0:	9f 57       	subi	r25, 0x7F	; 127
 5b2:	98 f0       	brcs	.+38     	; 0x5da <__fixunssfsi+0x30>
 5b4:	b9 2f       	mov	r27, r25
 5b6:	99 27       	eor	r25, r25
 5b8:	b7 51       	subi	r27, 0x17	; 23
 5ba:	b0 f0       	brcs	.+44     	; 0x5e8 <__fixunssfsi+0x3e>
 5bc:	e1 f0       	breq	.+56     	; 0x5f6 <__fixunssfsi+0x4c>
 5be:	66 0f       	add	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	88 1f       	adc	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	1a f0       	brmi	.+6      	; 0x5ce <__fixunssfsi+0x24>
 5c8:	ba 95       	dec	r27
 5ca:	c9 f7       	brne	.-14     	; 0x5be <__fixunssfsi+0x14>
 5cc:	14 c0       	rjmp	.+40     	; 0x5f6 <__fixunssfsi+0x4c>
 5ce:	b1 30       	cpi	r27, 0x01	; 1
 5d0:	91 f0       	breq	.+36     	; 0x5f6 <__fixunssfsi+0x4c>
 5d2:	0e 94 8b 03 	call	0x716	; 0x716 <__fp_zero>
 5d6:	b1 e0       	ldi	r27, 0x01	; 1
 5d8:	08 95       	ret
 5da:	0c 94 8b 03 	jmp	0x716	; 0x716 <__fp_zero>
 5de:	67 2f       	mov	r22, r23
 5e0:	78 2f       	mov	r23, r24
 5e2:	88 27       	eor	r24, r24
 5e4:	b8 5f       	subi	r27, 0xF8	; 248
 5e6:	39 f0       	breq	.+14     	; 0x5f6 <__fixunssfsi+0x4c>
 5e8:	b9 3f       	cpi	r27, 0xF9	; 249
 5ea:	cc f3       	brlt	.-14     	; 0x5de <__fixunssfsi+0x34>
 5ec:	86 95       	lsr	r24
 5ee:	77 95       	ror	r23
 5f0:	67 95       	ror	r22
 5f2:	b3 95       	inc	r27
 5f4:	d9 f7       	brne	.-10     	; 0x5ec <__fixunssfsi+0x42>
 5f6:	3e f4       	brtc	.+14     	; 0x606 <__fixunssfsi+0x5c>
 5f8:	90 95       	com	r25
 5fa:	80 95       	com	r24
 5fc:	70 95       	com	r23
 5fe:	61 95       	neg	r22
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	8f 4f       	sbci	r24, 0xFF	; 255
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	08 95       	ret

00000608 <__floatunsisf>:
 608:	e8 94       	clt
 60a:	09 c0       	rjmp	.+18     	; 0x61e <__floatsisf+0x12>

0000060c <__floatsisf>:
 60c:	97 fb       	bst	r25, 7
 60e:	3e f4       	brtc	.+14     	; 0x61e <__floatsisf+0x12>
 610:	90 95       	com	r25
 612:	80 95       	com	r24
 614:	70 95       	com	r23
 616:	61 95       	neg	r22
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	99 23       	and	r25, r25
 620:	a9 f0       	breq	.+42     	; 0x64c <__floatsisf+0x40>
 622:	f9 2f       	mov	r31, r25
 624:	96 e9       	ldi	r25, 0x96	; 150
 626:	bb 27       	eor	r27, r27
 628:	93 95       	inc	r25
 62a:	f6 95       	lsr	r31
 62c:	87 95       	ror	r24
 62e:	77 95       	ror	r23
 630:	67 95       	ror	r22
 632:	b7 95       	ror	r27
 634:	f1 11       	cpse	r31, r1
 636:	f8 cf       	rjmp	.-16     	; 0x628 <__floatsisf+0x1c>
 638:	fa f4       	brpl	.+62     	; 0x678 <__floatsisf+0x6c>
 63a:	bb 0f       	add	r27, r27
 63c:	11 f4       	brne	.+4      	; 0x642 <__floatsisf+0x36>
 63e:	60 ff       	sbrs	r22, 0
 640:	1b c0       	rjmp	.+54     	; 0x678 <__floatsisf+0x6c>
 642:	6f 5f       	subi	r22, 0xFF	; 255
 644:	7f 4f       	sbci	r23, 0xFF	; 255
 646:	8f 4f       	sbci	r24, 0xFF	; 255
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	16 c0       	rjmp	.+44     	; 0x678 <__floatsisf+0x6c>
 64c:	88 23       	and	r24, r24
 64e:	11 f0       	breq	.+4      	; 0x654 <__floatsisf+0x48>
 650:	96 e9       	ldi	r25, 0x96	; 150
 652:	11 c0       	rjmp	.+34     	; 0x676 <__floatsisf+0x6a>
 654:	77 23       	and	r23, r23
 656:	21 f0       	breq	.+8      	; 0x660 <__floatsisf+0x54>
 658:	9e e8       	ldi	r25, 0x8E	; 142
 65a:	87 2f       	mov	r24, r23
 65c:	76 2f       	mov	r23, r22
 65e:	05 c0       	rjmp	.+10     	; 0x66a <__floatsisf+0x5e>
 660:	66 23       	and	r22, r22
 662:	71 f0       	breq	.+28     	; 0x680 <__floatsisf+0x74>
 664:	96 e8       	ldi	r25, 0x86	; 134
 666:	86 2f       	mov	r24, r22
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	2a f0       	brmi	.+10     	; 0x678 <__floatsisf+0x6c>
 66e:	9a 95       	dec	r25
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	88 1f       	adc	r24, r24
 676:	da f7       	brpl	.-10     	; 0x66e <__floatsisf+0x62>
 678:	88 0f       	add	r24, r24
 67a:	96 95       	lsr	r25
 67c:	87 95       	ror	r24
 67e:	97 f9       	bld	r25, 7
 680:	08 95       	ret

00000682 <__fp_inf>:
 682:	97 f9       	bld	r25, 7
 684:	9f 67       	ori	r25, 0x7F	; 127
 686:	80 e8       	ldi	r24, 0x80	; 128
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	08 95       	ret

0000068e <__fp_nan>:
 68e:	9f ef       	ldi	r25, 0xFF	; 255
 690:	80 ec       	ldi	r24, 0xC0	; 192
 692:	08 95       	ret

00000694 <__fp_pscA>:
 694:	00 24       	eor	r0, r0
 696:	0a 94       	dec	r0
 698:	16 16       	cp	r1, r22
 69a:	17 06       	cpc	r1, r23
 69c:	18 06       	cpc	r1, r24
 69e:	09 06       	cpc	r0, r25
 6a0:	08 95       	ret

000006a2 <__fp_pscB>:
 6a2:	00 24       	eor	r0, r0
 6a4:	0a 94       	dec	r0
 6a6:	12 16       	cp	r1, r18
 6a8:	13 06       	cpc	r1, r19
 6aa:	14 06       	cpc	r1, r20
 6ac:	05 06       	cpc	r0, r21
 6ae:	08 95       	ret

000006b0 <__fp_round>:
 6b0:	09 2e       	mov	r0, r25
 6b2:	03 94       	inc	r0
 6b4:	00 0c       	add	r0, r0
 6b6:	11 f4       	brne	.+4      	; 0x6bc <__fp_round+0xc>
 6b8:	88 23       	and	r24, r24
 6ba:	52 f0       	brmi	.+20     	; 0x6d0 <__fp_round+0x20>
 6bc:	bb 0f       	add	r27, r27
 6be:	40 f4       	brcc	.+16     	; 0x6d0 <__fp_round+0x20>
 6c0:	bf 2b       	or	r27, r31
 6c2:	11 f4       	brne	.+4      	; 0x6c8 <__fp_round+0x18>
 6c4:	60 ff       	sbrs	r22, 0
 6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <__fp_round+0x20>
 6c8:	6f 5f       	subi	r22, 0xFF	; 255
 6ca:	7f 4f       	sbci	r23, 0xFF	; 255
 6cc:	8f 4f       	sbci	r24, 0xFF	; 255
 6ce:	9f 4f       	sbci	r25, 0xFF	; 255
 6d0:	08 95       	ret

000006d2 <__fp_split3>:
 6d2:	57 fd       	sbrc	r21, 7
 6d4:	90 58       	subi	r25, 0x80	; 128
 6d6:	44 0f       	add	r20, r20
 6d8:	55 1f       	adc	r21, r21
 6da:	59 f0       	breq	.+22     	; 0x6f2 <__fp_splitA+0x10>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	71 f0       	breq	.+28     	; 0x6fc <__fp_splitA+0x1a>
 6e0:	47 95       	ror	r20

000006e2 <__fp_splitA>:
 6e2:	88 0f       	add	r24, r24
 6e4:	97 fb       	bst	r25, 7
 6e6:	99 1f       	adc	r25, r25
 6e8:	61 f0       	breq	.+24     	; 0x702 <__fp_splitA+0x20>
 6ea:	9f 3f       	cpi	r25, 0xFF	; 255
 6ec:	79 f0       	breq	.+30     	; 0x70c <__fp_splitA+0x2a>
 6ee:	87 95       	ror	r24
 6f0:	08 95       	ret
 6f2:	12 16       	cp	r1, r18
 6f4:	13 06       	cpc	r1, r19
 6f6:	14 06       	cpc	r1, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	f2 cf       	rjmp	.-28     	; 0x6e0 <__fp_split3+0xe>
 6fc:	46 95       	lsr	r20
 6fe:	f1 df       	rcall	.-30     	; 0x6e2 <__fp_splitA>
 700:	08 c0       	rjmp	.+16     	; 0x712 <__fp_splitA+0x30>
 702:	16 16       	cp	r1, r22
 704:	17 06       	cpc	r1, r23
 706:	18 06       	cpc	r1, r24
 708:	99 1f       	adc	r25, r25
 70a:	f1 cf       	rjmp	.-30     	; 0x6ee <__fp_splitA+0xc>
 70c:	86 95       	lsr	r24
 70e:	71 05       	cpc	r23, r1
 710:	61 05       	cpc	r22, r1
 712:	08 94       	sec
 714:	08 95       	ret

00000716 <__fp_zero>:
 716:	e8 94       	clt

00000718 <__fp_szero>:
 718:	bb 27       	eor	r27, r27
 71a:	66 27       	eor	r22, r22
 71c:	77 27       	eor	r23, r23
 71e:	cb 01       	movw	r24, r22
 720:	97 f9       	bld	r25, 7
 722:	08 95       	ret

00000724 <__divmodhi4>:
 724:	97 fb       	bst	r25, 7
 726:	07 2e       	mov	r0, r23
 728:	16 f4       	brtc	.+4      	; 0x72e <__divmodhi4+0xa>
 72a:	00 94       	com	r0
 72c:	07 d0       	rcall	.+14     	; 0x73c <__divmodhi4_neg1>
 72e:	77 fd       	sbrc	r23, 7
 730:	09 d0       	rcall	.+18     	; 0x744 <__divmodhi4_neg2>
 732:	0e 94 a6 03 	call	0x74c	; 0x74c <__udivmodhi4>
 736:	07 fc       	sbrc	r0, 7
 738:	05 d0       	rcall	.+10     	; 0x744 <__divmodhi4_neg2>
 73a:	3e f4       	brtc	.+14     	; 0x74a <__divmodhi4_exit>

0000073c <__divmodhi4_neg1>:
 73c:	90 95       	com	r25
 73e:	81 95       	neg	r24
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	08 95       	ret

00000744 <__divmodhi4_neg2>:
 744:	70 95       	com	r23
 746:	61 95       	neg	r22
 748:	7f 4f       	sbci	r23, 0xFF	; 255

0000074a <__divmodhi4_exit>:
 74a:	08 95       	ret

0000074c <__udivmodhi4>:
 74c:	aa 1b       	sub	r26, r26
 74e:	bb 1b       	sub	r27, r27
 750:	51 e1       	ldi	r21, 0x11	; 17
 752:	07 c0       	rjmp	.+14     	; 0x762 <__udivmodhi4_ep>

00000754 <__udivmodhi4_loop>:
 754:	aa 1f       	adc	r26, r26
 756:	bb 1f       	adc	r27, r27
 758:	a6 17       	cp	r26, r22
 75a:	b7 07       	cpc	r27, r23
 75c:	10 f0       	brcs	.+4      	; 0x762 <__udivmodhi4_ep>
 75e:	a6 1b       	sub	r26, r22
 760:	b7 0b       	sbc	r27, r23

00000762 <__udivmodhi4_ep>:
 762:	88 1f       	adc	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	5a 95       	dec	r21
 768:	a9 f7       	brne	.-22     	; 0x754 <__udivmodhi4_loop>
 76a:	80 95       	com	r24
 76c:	90 95       	com	r25
 76e:	bc 01       	movw	r22, r24
 770:	cd 01       	movw	r24, r26
 772:	08 95       	ret

00000774 <_exit>:
 774:	f8 94       	cli

00000776 <__stop_program>:
 776:	ff cf       	rjmp	.-2      	; 0x776 <__stop_program>
